// @ts-nocheck
export default class DateHelper{#e;constructor(e){if(e instanceof DateHelper)this.#e=new Date(e.#e);else if(e instanceof Date)this.#e=new Date(e);else if("string"==typeof e&&e.includes("-")){const[t,a,r]=e.split("-").map(Number);this.#e=new Date(t,a-1,r)}else this.#e=e?new Date(e):new Date}getNormalizedDate(){return new Date(this.#e.getFullYear(),this.#e.getMonth(),this.#e.getDate())}equals(e){const t=e instanceof DateHelper?e:new DateHelper(e);return this.getNormalizedDate().getTime()===t.getNormalizedDate().getTime()}isBefore(e){const t=e instanceof DateHelper?e:new DateHelper(e);return this.getNormalizedDate().getTime()<t.getNormalizedDate().getTime()}isSameOrBefore(e){const t=e instanceof DateHelper?e:new DateHelper(e);return this.getNormalizedDate().getTime()<=t.getNormalizedDate().getTime()}isAfter(e){const t=e instanceof DateHelper?e:new DateHelper(e);return this.getNormalizedDate().getTime()>t.getNormalizedDate().getTime()}isSameOrAfter(e){const t=e instanceof DateHelper?e:new DateHelper(e);return this.getNormalizedDate().getTime()>=t.getNormalizedDate().getTime()}toYYYYMMDD(){return`${this.#e.getFullYear()}-${String(this.#e.getMonth()+1).padStart(2,"0")}-${String(this.#e.getDate()).padStart(2,"0")}`}addDays(e){const t=new Date(this.#e);return t.setDate(t.getDate()+e),new DateHelper(t)}addMonths(e){const t=new Date(this.#e);return t.setMonth(t.getMonth()+e),new DateHelper(t)}toNativeDate(){return new Date(this.#e)}fromString(e){return new DateHelper(e)}today(){return new DateHelper(new Date)}static today(){return new DateHelper(new Date)}toString(){return this.#e.toString()}}