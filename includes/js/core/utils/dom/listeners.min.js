// @ts-nocheck
import{getValidElement}from"./elements.min.js";const listenerRegistry=new Map;export function addListener({elementOrId:e,eventType:t,handler:r,componentId:n}){try{if(!e||!t||"function"!=typeof r||!n)throw new Error(`Invalid listener parameters: elementOrId=${e}, eventType=${t}, hasListener=${!!r}, componentId=${n}`);const s=getValidElement(e);return(Array.isArray(t)?t:[t]).forEach((e=>{s.addEventListener(e,r),registerListener({element:s,type:e,listener:r,componentId:n})})),!0}catch(r){const s="string"==typeof e?`element with ID "${e}"`:e?.id?`element with ID "${e.id}"`:"element (no ID)";return console.error("Listener registration failed:",{element:s,event:t,component:n,error:r}),import("../../errors/models/AppError.min.js").then((({AppError:e})=>e.handleError(r,{errorCode:e.Types.INITIALIZATION_ERROR,userMessage:"Unable to initialize component. Some features may be unavailable."}))).catch((e=>console.error("Error handler failed:",e))),!1}}function registerListener({element:e,type:t,listener:r,componentId:n}){listenerRegistry.has(n)||listenerRegistry.set(n,new Set),listenerRegistry.get(n).add({element:e,type:t,listener:r})}export function removeListeners(e){const t=listenerRegistry.get(e);t&&(t.forEach((({element:e,type:t,listener:r})=>{e.removeEventListener(t,r)})),listenerRegistry.delete(e))}export function hasListeners(e){return listenerRegistry.has(e)&&listenerRegistry.get(e).size>0}export function removeAllListeners(){for(const e of listenerRegistry.keys())removeListeners(e)}