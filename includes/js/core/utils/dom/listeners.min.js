// @ts-nocheck
import{getValidElement}from"./elements.js";const REGISTRY_KEY="APP_LISTENER_REGISTRY";window[REGISTRY_KEY]||(window[REGISTRY_KEY]=new Map);const listenerRegistry=window[REGISTRY_KEY];export function addListener({elementOrId:e,eventType:r,handler:t,componentId:n}){try{if(!e||!r||"function"!=typeof t||!n)throw new Error(`Invalid listener parameters: elementOrId=${e}, eventType=${r}, hasListener=${!!t}, componentId=${n}`);let o;o=e===window||e===document?e:getValidElement(e);return(Array.isArray(r)?r:[r]).forEach((e=>{o.addEventListener(e,t),registerListener({element:o,type:e,listener:t,componentId:n})})),!0}catch(t){let o;return o=e===window?"window object":e===document?"document object":"string"==typeof e?`element with ID "${e}"`:e?.id?`element with ID "${e.id}"`:"element (no ID)",console.error("Listener registration failed:",{element:o,event:r,component:n,error:t}),import("../../errors/models/AppError.js").then((({AppError:e})=>e.handleError(t,{errorCode:e.Types.INITIALIZATION_ERROR,userMessage:"Unable to initialize component. Some features may be unavailable."}))).catch((e=>console.error("Error handler failed:",e))),!1}}function registerListener({element:e,type:r,listener:t,componentId:n}){listenerRegistry.has(n)||listenerRegistry.set(n,new Set),listenerRegistry.get(n).add({element:e,type:r,listener:t})}export function removeListeners(e){const r=window[REGISTRY_KEY];if(!r)return void console.error("CRITICAL ERROR: Global listener registry  not found!");const t=r.get(e);if(!t)return;Array.from(t).forEach((({element:t,type:n,listener:o})=>{try{t.removeEventListener(n,o)}catch(r){console.error(`Error removing listener for ${e}: `,r)}r.delete(e)}))}export function hasListeners(e){const r=window[REGISTRY_KEY];return!!r&&(r.has(e)&&r.get(e).size>0)}export function removeAllListeners(){for(const e of listenerRegistry.keys())removeListeners(e)}