// @ts-nocheck
import{displayErrorMessage,safeDisplayMessage}from"../../utils/dom/messages.js";export class AppError extends Error{static#e=new Map;static get BaseMessages(){return{system:{generic:"A system error occurred.",network:"Network connection error. Please check your connection.",server:"Server error occurred. Please try again later.",processing:"An error occurred while processing your request.",initialization:"System initialization failed. Please refresh the page.",render:"An error occurred while trying to render the page.",helpDesk:"If this problem persists, please submit a new Help Desk Ticket for this issue. Thank You",database:"Database error occurred."},auth:{tokenInvalid:"Unable to validate your credentials. Please log in again.",unauthorized:"You are not authorized to access this resource.",sessionExpired:"Your session has expired.",loginFailed:"Login failed. Please check your credentials."},components:{navigation:"Some navigation features are not working. Please refresh the page.",backup:"The backup system is not responding. Your work will still be saved.",calendar:"Calendar features are currently unavailable.",search:"Search functionality is currently unavailable."},forms:{validationFailed:"Form validation failed.",submissionFailed:"Form submission failed.",noData:"No local data found for this form.",messageDisplayFailed:"Failed to display form message."}}}static async getMessages(e){if(!e)return this.BaseMessages;if(this.#e.has(e))return this.#e.get(e);try{const{messages:r}=await import(`../../../features/${e}/errors.js`);return this.#e.set(e,r),r}catch(e){return this.BaseMessages}}constructor(e="An unexpected error occurred.",r={}){super(e),this.name="AppError",this.originalError=r.originalError||null,this.shouldLog=r.shouldLog??!0,this.userMessage=null===r.userMessage?null:r.userMessage||e,this.errorCode=r.errorCode||"UNKNOWN_ERROR",this.logged=!1,this.displayTarget=r.displayTarget||"page-msg",Error.captureStackTrace?.(this,this.constructor),r.autoHandle&&this.handle().catch((e=>console.error("Auto-handling failed:",e))),r.feature&&this.loadFeatureMessages(r.feature).catch((e=>console.warn("Failed to load feature messages:",e)));["INITIALIZATION_ERROR","NAVIGATION_ERROR","DATABASE_ERROR","API_ERROR","FORM_VALIDATION_ERROR","FORM_SUBMISSION_ERROR"].includes(this.errorCode)&&(this.userMessage=`${this.userMessage} ${AppError.BaseMessages.system.helpDesk}`)}static get Types(){return{INITIALIZATION_ERROR:"INITIALIZATION_ERROR",PROCESSING_ERROR:"PROCESSING_ERROR",CALCULATION_ERROR:"CALCULATION_ERROR",NAVIGATION_ERROR:"NAVIGATION_ERROR",BACKUP_ERROR:"BACKUP_ERROR",SETTINGS_ERROR:"SETTINGS_ERROR",DATABASE_ERROR:"DATABASE_ERROR",API_ERROR:"API_ERROR",AUTHORIZATION_ERROR:"AUTHORIZATION_ERROR",RENDER_ERROR:"RENDER_ERROR",INPUT_ERROR:"INPUT_ERROR",FORM_VALIDATION_ERROR:"FORM_VALIDATION_ERROR",FORM_SUBMISSION_ERROR:"FORM_SUBMISSION_ERROR",FORM_POPULATION_ERROR:"FORM_POPULATION_ERROR",MESSAGE_DISPLAY_ERROR:"MESSAGE_DISPLAY_ERROR"}}static async handleError(e,r={}){if(e instanceof AppError)await e.handle();else{const s=new AppError(e.message,{originalError:e,...r});await s.handle()}}static async process(e,r={},s=!0){let a;return a=e instanceof AppError?e:new AppError(e.message,{originalError:e,...r}),await a.handle(s),a}async handle(e=!1){try{if(console.log("AppError: handle: shouldThrow: ",e),this.shouldLog&&!this.logged&&await this.logError(),null!==this.userMessage&&await this.displayError(),e)throw this;return this}catch(r){if(console.warn("AppError handlingError: ",r),e)throw r;return console.error("Error handling failed:",{handling:r.message,originalError:this.message}),this.displayFallbackError(),this}}async logServerSideError(){try{const[{fetchData:e},{getValidationToken:r}]=await Promise.all([import("../../network/services/network.js"),import("../../auth/services/tokenUtils.js")]),s=r();if(!s)return void console.warn("No validation token available");const a={page:this.errorCode,error:{name:this.name,message:this.message,code:this.errorCode,stack:this.stack?.split("\n"),originalError:this.originalError?{name:this.originalError.name,message:this.originalError.message,stack:this.originalError.stack?.split("\n")}:null,userMessage:this.userMessage}};await e({api:"/includes/api/error-logs/errorLogAPI.php",data:a,token:s});this.logged=!0}catch(e){console.error("Server logging failed:",e),await this.queueForSync().catch((e=>console.warn("Failed to queue error:",e)))}}async logError(e=!1){this.logged||console.warn(`${this.name}:`,{message:this.message,code:this.errorCode,originalError:this.originalError});try{if(await this.logServerSideError(),e)throw this}catch(r){if(console.error("Error logging failed:",r),await this.queueForSync(),e)throw r}}async displayError(){try{document.querySelectorAll('[data-msg-type="processing"]').forEach((e=>e.textContent="")),safeDisplayMessage({elementId:this.displayTarget,message:this.userMessage,isSuccess:!1})}catch(e){}}displayFallbackError(){try{displayErrorMessage(this.displayTarget,"A system error occurred. Please refresh the page.")}catch(e){console.error("Fallback display failed:",e)}}async queueForSync(){try{const{default:e}=await import("../../database/IndexedDBOperations.js"),r=new e,s=await r.openDBPromise();await r.putStorePromise(s,{errorCode:this.errorCode,message:this.message,stack:this.stack,timestamp:(new Date).toISOString()},r.stores.ERRORQUEUE)}catch(e){console.warn("Failed to queue error:",e)}}static from(e,r={}){return new AppError(e.message,{originalError:e,...r})}}