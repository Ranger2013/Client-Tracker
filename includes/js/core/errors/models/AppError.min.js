// @ts-nocheck
// @ts-nocheck
import{getValidElement}from"./elements.js";const listenerRegistry=new Map;export function addListener(e,t,r,n){try{if(!t||"function"!=typeof r||!n)throw new Error(`Invalid listener parameters: eventType=${t}, hasListener=${!!r}, componentId=${n}`);const s=getValidElement(e);s.addEventListener(t,r),listenerRegistry.has(n)||listenerRegistry.set(n,new Set),listenerRegistry.get(n).add({element:s,type:t,listener:r})}catch(r){const s="string"==typeof e?`element with ID "${e}"`:"element "+(e?.id?`with ID "${e.id}"`:"(no ID)");return import("../../errors/models/AppError.js").then((({AppError:e})=>new e(`Failed to attach ${t} listener`,{originalError:r,errorCode:e.Types.INITIALIZATION_ERROR,userMessage:e.Messages.system.initialization,shouldLog:!0,message:`Failed to attach ${t} listener to ${s} for component "${n}"`}).handle())).catch((e=>{console.error("Listener registration failed:",{element:s,event:t,component:n,error:r,handlingError:e})})),!1}return!0}export function removeListeners(e){const t=listenerRegistry.get(e);t&&(t.forEach((({element:e,type:t,listener:r})=>{e.removeEventListener(t,r)})),listenerRegistry.delete(e))}export function hasListeners(e){return listenerRegistry.has(e)&&listenerRegistry.get(e).size>0}export function removeAllListeners(){for(const e of listenerRegistry.keys())removeListeners(e)}