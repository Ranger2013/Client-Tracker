// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
// @ts-nocheck
import{addListener}from"../../../core/utils/dom/listeners.js";import{ucwords}from"../../../core/utils/string/stringUtils.js";import{clearMsg,safeDisplayMessage}from"../../../core/utils/dom/messages.js";import{checkForDuplicate}from"../../services/duplicateCheck.js";import{formatEmail,formatPhone}from"../../../core/utils/dom/forms/validation.js";import{checkPasswordStrength,comparePasswords}from"../../utils/passwordValidation.js";import{getTerms,handleUserRegistration}from"./components/registerUserHelpers.js";import{createAdaptiveHandler}from"../../../core/utils/dom/eventUtils.js";import{disableEnableSubmitButton}from"../../../core/utils/dom/elements.js";function initializeRegistrationForm(){["first-name","last-name","company-name"].forEach((e=>{addListener({element:e,event:"input",handler:e=>e.target.value=ucwords(e.target.value)})}));[{id:"email",type:"email",format:"email",inputType:"validation"},{id:"phone",type:"phone",format:"phone",inputType:"validation"},{id:"username",type:"username",inputType:"validation"}].forEach((({id:e,type:t,inputType:r,format:a})=>{addListener({element:e,event:"focus",handler:t=>clearMsg({container:`${e}-error`,input:t.target})}),addListener({element:e,event:"input",handler:createAdaptiveHandler((async e=>{if(a){if(!await handleFormatting({target:e.target,format:a}))return}const r=await checkForDuplicate({value:e.target.value,type:t,userType:"users"});"duplicate"===r.status?await handleValidationResponse({response:r.msg,errorEle:`${e.target.id}-error`,inputEle:e.target}):"ok"===r.status&&clearMsg({container:`${e.target.id}-error`,input:e.target}),disableEnableSubmitButton("submit-button")}),r)})})),addListener({element:"password",event:"input",handler:createAdaptiveHandler((async e=>await checkPasswordStrength(e,"password-strength-container","password-error","submit-button")),"validation")}),addListener({element:"confirm-password",event:"input",handler:createAdaptiveHandler((async e=>await comparePasswords(e,"password","confirm-password-error","submit-button")),"validation")}),["terms","privacy"].forEach((e=>addListener({element:e,event:"click",handler:()=>getTerms(e)}))),addListener({element:"new-user-form",event:"submit",handler:handleUserRegistration})}async function handleValidationResponse({response:e,errorEle:t,inputEle:r}){try{return console.log("In handleValidationResponse:",e),!e||(safeDisplayMessage({elementId:t,message:e,targetId:r}),disableEnableSubmitButton("submit-button"),null)}catch(e){}}async function handleFormatting({target:e,format:t}){try{if(console.log("In handleFormatting:"),"phone"===t){const r=formatPhone(e.value);return r?(e.value=r,clearMsg({container:`${e.id}-error`,input:e}),!0):(await handleValidationResponse({response:`Invalid ${t} format.`,errorEle:`${e.id}-error`,inputEle:e}),!1)}if("email"===t){const r=formatEmail(e.value);return console.log("In handleFormatting: formattedEmail: ",r),r?(clearMsg({container:`${e.id}-error`,input:e}),!0):(await handleValidationResponse({response:`Invalid ${t} format.`,errorEle:`${e.id}-error`,inputEle:e}),!1)}}catch(e){}}document.addEventListener("DOMContentLoaded",initializeRegistrationForm);