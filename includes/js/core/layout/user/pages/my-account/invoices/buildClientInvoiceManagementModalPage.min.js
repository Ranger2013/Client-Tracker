// @ts-nocheck
import ManageClient from"../../../../../../features/client/models/ManageClient.js";import IndexedDBOperations from"../../../../../database/IndexedDBOperations.js";import openModal from"../../../../../services/modal/openModal.js";import{buildElementTree}from"../../../../../utils/dom/elements.js";const COMPONENT="Client Invoice Management Modal Page",DEBUG=!1,debugLog=(...e)=>{false},MODAL_LISTENER_ID="unpaid-invoices-modal-listeners";export default async function buildClientInvoiceManagementModal({evt:e,manageUser:t,componentId:i}){try{const t=e.target.dataset,i=t.clientid,n=t.trimid,a=""!==t.invoiceid?t.invoiceid:null,o=buildModalContent({cID:i,trimID:n,invoiceID:a,clientName:await getClientsName(i)});openModal({content:o,componentId:MODAL_LISTENER_ID})}catch(e){const{AppError:t}=await import("../../../../../errors/models/AppError.js");t.process(e,{errorCode:t.Types.RENDER_ERROR,userMessage:"Unable to display the invoice management modal.",displayTarget:"form-msg"},!0)}}function buildModalContent({cID:e,trimID:t,invoiceID:i,clientName:n}){return buildElementTree({type:"div",myClass:["w3-card"],children:{titleSection:{type:"div",myClass:["w3-center"],children:{title:{type:"h5",text:`Client ${n}`},modalMsg:{type:"div",attributes:{id:"modal-msg"}}}},row:{type:"div",myClass:["w3-row","w3-padding-small"],children:{colOne:{type:"div",myClass:["w3-col","s6","w3-padding-small"],text:`${n}'s Invoice: `},colTwo:{type:"div",myClass:["w3-col","s6","w3-padding-small"],children:{row:{type:"div",myClass:["w3-row"],children:{subColOne:{type:"div",myClass:["w3-col","m6","w3-center"],children:{paidButton:{type:"button",myClass:["w3-small","w3-button","w3-black","w3-round-large"],attributes:{id:"paid-button","data-cid":e,"data-trimid":t},text:"Paid"}}},subColTwo:i?{type:"div",myClass:["w3-col","m6","w3-center"],children:{invoiceButton:{type:"button",myClass:["w3-small","w3-button","w3-blue","w3-round-large","w3-margin-left"],attributes:{id:"resend-invoice","data-cid":e,"data-trimid":t,"data-invoiceid":i},text:"Resend Invoice"}}}:{}}}}}}}}})}async function getClientsName(e){const t=new IndexedDBOperations({debug:!1}),i=await t.openDBPromise(),n=await t.getAllStoreByIndexPromise(i,t.stores.CLIENTLIST,"cID",e);return n.length>0?n[0].client_name:null}