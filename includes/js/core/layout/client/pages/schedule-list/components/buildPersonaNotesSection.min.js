// @ts-nocheck
import{sortByDateOnly}from"../../../../../utils/date/dateUtils.js";import{buildEle,buildElementsFromConfig}from"../../../../../utils/dom/elements.js";import{clearMsg}from"../../../../../utils/dom/messages.js";import{cleanUserOutput}from"../../../../../utils/string/stringUtils.js";const COMPONENT="Build Personal Notes Section",DEBUG=!1,debugLog=(...e)=>{false},PAGE_CONFIG={infoBlock:{type:"span",attributes:{style:"display: inline-block; line-height: 0; vertical-align: top;"},myClass:["w3-pointer","w3-hide"],text:'<svg id="info-icon" class="w3-pointer" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n\t\t\t  <circle cx="12" cy="12" r="10"></circle>\n\t\t\t  <line x1="12" y1="18" x2="12" y2="10"></line>\n\t\t\t  <line x1="12" y1="6" x2="12" y2="6"></line>\n\t\t </svg>'},notesBlock:{type:"div",attributes:{id:"personal-notes-block"},myClass:["w3-border-left","w3-border-top","w3-border-right","w3-hide","collapsed","slide-down","w3-margin-top-small"]}},NOTES_CONFIG={notesRow:{type:"div",myClass:["w3-row","w3-border-bottom"]},colOne:{type:"div",myClass:["w3-col","m3","w3-padding-small"]},colTwo:{type:"div",myClass:["w3-col","m9","w3-padding-small"]}};export default async function buildPersonalNotesSection({manageUser:e}){const t=document.createDocumentFragment();try{clearMsg({container:"page-msg"});const o=await e.getUserPersonalNotes();debugLog();const s=buildElementsFromConfig(PAGE_CONFIG),{infoBlock:n,notesBlock:r}=s;if(o.length>0){n.classList.remove("w3-hide"),o.sort(((e,t)=>sortByDateOnly(e.date,t.date,!1))),debugLog();const e=buildNotesFromConfig({config:NOTES_CONFIG,notes:o});r.append(...e)}return t.append(n,r),t}catch(e){const{AppError:o}=await import("../../../../../errors/models/AppError.js");o.handleError(e,{errorCode:o.Types.RENDER_ERROR,userMessage:null});const s=buildEle({type:"div",myClass:["w3-center","w3-text-red"],text:"Error loading personal notes"});return t.append(s),t}}function buildNotesFromConfig({config:e,notes:t}){return t.map((t=>{const o=buildEle(e.notesRow),s=buildEle({...e.colOne,text:cleanUserOutput(t.date)}),n=buildEle({...e.colTwo,text:cleanUserOutput(t.notes)});return debugLog(),debugLog(),debugLog(),o.append(s,n),o}))}