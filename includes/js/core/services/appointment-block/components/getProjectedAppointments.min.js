// @ts-nocheck
import getBlockOfTime from"./getBlockOfTime.js";import predictNextSessionNumberHorses from"./predictNextSessionNumberHorses.js";const COMPONENT="Get Projected Appointments",DEBUG=!0,debugLog=(...e)=>{console.log(`[${COMPONENT}]`,...e)};export default async function getProjectedAppointments({appointmentDate:e,trimCycle:t,clientInfo:o,scheduleOptions:n,manageClient:i}){try{let s=o?.cID||null;if(!(o?.trim_cycle||("null"!==t.options[t.selectedIndex].value?t.options[t.selectedIndex].value:null)))return null;const[c,l,r]=e.value.split("-"),a=new Date(c,l-1,r);a.setHours(0,0,0,0);const u=new Date;u.setHours(0,0,0,0);const g=[],d=new Set;for(const e of[7,14,21,28,35,42,49,56,63,70]){const t=new Date(a);if(t.setDate(a.getDate()-e),t<=u)return g.length>0?g:null;debugLog("Past Date: ",t),debugLog("Past Date to ISO String: ",t.toISOString());const o=t.toISOString().slice(0,10);debugLog("Formatted Past Date: ",o);const c=await i.getClientScheduleByTrimDate(o);if(debugLog("Trim Dates: ",c),c?.length>0)for(const t of c){if(d.has(t.cID)||t.cID===s||"no"===t.active||t.trim_cycle!==e.toString())continue;d.add(t.cID);const o=await buildProjectedBookingData(t,i,n);o&&g.push(o)}}return g.length>0?g:null}catch(e){throw e}}async function buildProjectedBookingData(e,t,o){debugLog("Building projected booking data for:",e);const n=await predictNextSessionNumberHorses({clientData:{...e,scheduleOptions:o},manageClient:t});debugLog("Prediction result:",n);const i=n?.totalTime||0;return debugLog("Time block calculation:",{predictionTotalTime:n?.totalTime,finalTimeBlock:i}),{client_name:e.client_name,cID:e.cID,primaryKey:e.primaryKey,city:e.city,num_horses:n?.horses?.length||0,new_client:e.horses&&0!==e.horses.length?"":"New Client.",predicted_services:n?.serviceBreakdown||{trims:0,halfSets:0,fullSets:0},time_block:i}}