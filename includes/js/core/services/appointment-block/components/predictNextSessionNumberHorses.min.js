// @ts-nocheck
const COMPONENT="Predict Next Session Number Horses",DEBUG=!0,debugLog=(...e)=>{e.forEach((e=>{"object"==typeof e&&null!==e?console.dir(e,{depth:null}):console.log(`[${COMPONENT}]`,e)}))};export default async function predictNextSessionNumberHorses({clientData:e,manageClient:r}){try{debugLog("Starting prediction with client data:",e);const{cID:t,horses:s,trim_date:n}=e,o=await r.getClientTrimmingInfo(t);if(debugLog("Retrieved trimming info:",o),!o||!Array.isArray(o)||0===o.length)return debugLog("No trimming history found, using current horses"),calculateTimeFromHorses(s,e.scheduleOptions);debugLog("Calling predictHorsesAndServices with trimmings:",o);const i=await predictHorsesAndServices(o,s,n);debugLog("Received predicted horses:",i);const c=calculateTimeFromPrediction(i,e.scheduleOptions);return debugLog("Final prediction result:",c),c}catch(e){throw debugLog("Error in prediction:",e),e}}function calculateTimeFromHorses(e,r){const{avg_trim:t,half_set:s,full_set:n,avg_drive_time:o}=r,i={horses:e,totalTime:parseInt(o),serviceBreakdown:{trims:0,halfSets:0,fullSets:0}};return e.forEach((e=>{switch(e.service_type){case"trim":i.totalTime+=parseInt(t),i.serviceBreakdown.trims++;break;case"half_set":i.totalTime+=parseInt(s),i.serviceBreakdown.halfSets++;break;case"full_set":i.totalTime+=parseInt(n),i.serviceBreakdown.fullSets++}})),i}async function predictHorsesAndServices(e,r,t){debugLog("Enter predictHorsesAndServices");const s=e.sort(((e,r)=>new Date(e.date_trimmed)-new Date(r.date_trimmed))),n=identifyServiceGroups(s);debugLog("Service groups identified:",n);const o=findNextDueGroup(n,r,t,s);if(debugLog("Next due group determined:",o),!o&&r.length<=4)return checkIndividualHorses(s,r,t);if(!o&&r.length>4){const e=findMostFrequentGroupSize(s);return predictLargeHerdGroup(s,r,t,e)}return o.horses.map((e=>({...r.find((r=>r.hID===e)),predictedService:determineNextService(e,s)})))}function findMostFrequentGroupSize(e){const r=e.map((e=>e.horses.length)).reduce(((e,r)=>(e[r]=(e[r]||0)+1,e)),{});return parseInt(Object.entries(r).sort(((e,r)=>r[1]-e[1]))[0][0])}function predictLargeHerdGroup(e,r,t,s){const n=new Date(t);return r.map((r=>{const t=[...e].reverse().find((e=>e.horses.some((e=>e.hID===r.hID))));return{horse:r,daysSinceService:t?(n-new Date(t.date_trimmed))/864e5:Number.MAX_VALUE}})).sort(((e,r)=>r.daysSinceService-e.daysSinceService)).slice(0,s).map((({horse:e})=>({...e,predictedService:e.service_type||"trim"})))}function identifyServiceGroups(e){debugLog("Enter identifyServiceGroups");const r=new Map;e.forEach(((e,t)=>{debugLog(`Processing session ${t}:`,e);const s=e.horses.map((e=>e.hID)).sort().join(",");r.has(s)||r.set(s,{horses:e.horses.map((e=>e.hID)),dates:[],interval:0}),r.get(s).dates.push(new Date(e.date_trimmed))}));const t=Array.from(r.entries()).map((([e,r])=>{debugLog(`Processing group ${e}:`,r);const t=r.dates.sort(((e,r)=>e-r)),s=[];for(let e=1;e<t.length;e++){const r=(t[e]-t[e-1])/864e5;s.push(r)}const n={horses:r.horses,lastDate:t[t.length-1],interval:s.length>0?Math.round(s.reduce(((e,r)=>e+r))/s.length):42,frequency:t.length};return debugLog("Group result:",n),n}));return debugLog("All service groups:",t),t}function findNextDueGroup(e,r,t,s){if(debugLog("Enter findNextDueGroup"),!e.length)return null;const n=new Date(t),o=e.map((t=>{if(!t.horses.every((e=>r.some((r=>r.hID===e)))))return{score:-1,group:t};const o=t.horses.map((e=>{const r=[...s].reverse().find((r=>r.horses.some((r=>r.hID===e))));return r?new Date(r.date_trimmed):null})).filter((e=>null!==e)),i=new Date(Math.max(...o)),c=(n-i)/864e5,a=t.horses.map((e=>r.find((r=>r.hID===e))?.trim_cycle||42)).reduce(((e,r)=>e+r),0),u=Math.round(a/t.horses.length),d=c/u,l=4===t.horses.length?3:t.horses.length/r.length,g=t.frequency/Math.max(...e.map((e=>e.frequency)))*2,h=t.frequency>=2?2:0,m=2*d+3*l+2*g+1.5*h;return debugLog("Detailed group scoring:",{group:t,mostRecentService:i,daysSinceLastService:c,expectedDaysBetweenServices:u,dueScore:d,groupSizeBonus:l,frequencyBonus:g,consistencyBonus:h,weightedScore:m}),{score:m,group:t}})).filter((e=>e.score>0)).sort(((e,r)=>r.score-e.score))[0];return debugLog("Selected next due group:",o),o?o.group:null}function determineNextService(e,r){const t=r.filter((r=>r.horses.some((r=>r.hID===e)))).map((r=>getServiceType(r.horses.find((r=>r.hID===e)).type_trim)));return t.length>0?t[t.length-1]:"trim"}function calculateTimeFromPrediction(e,r){const{avg_trim:t,half_set:s,full_set:n,avg_drive_time:o}=r,i={horses:e,totalTime:parseInt(o),serviceBreakdown:{trims:0,halfSets:0,fullSets:0}};return e.forEach((e=>{switch(e.predictedService||e.service_type){case"trim":i.totalTime+=parseInt(t),i.serviceBreakdown.trims++;break;case"half_set":i.totalTime+=parseInt(s),i.serviceBreakdown.halfSets++;break;case"full_set":i.totalTime+=parseInt(n),i.serviceBreakdown.fullSets++}})),i}function getServiceType(e){return e.includes("front_")?"half_set":e.includes("full_")?"full_set":"trim"}