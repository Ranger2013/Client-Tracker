// @ts-nocheck
const COMPONENT="Predict Next Session Number Horses",DEBUG=!1,debugLog=(...e)=>{false};export default async function predictNextSessionNumberHorses({clientData:e,manageClient:r}){try{debugLog();const{cID:t,horses:s,trim_date:n}=e,i=await r.getClientTrimmingInfo(t);debugLog();const o=(await r.getAllDuplicateClients()).filter((e=>e.cID===parseInt(t,10))).filter((r=>r.primaryKey!==e.primaryKey&&new Date(r.trim_date)<new Date(n)&&new Date(r.trim_date)>new Date)).sort(((e,r)=>new Date(e.trim_date)-new Date(r.trim_date)));if(debugLog(),0===o.length){return calculateTimeFromPrediction(await predictHorsesAndServices(i,s,n),e.scheduleOptions)}let c=Array.isArray(i)?[...i]:[];for(const e of o){debugLog(e.trim_date);const r=await predictHorsesAndServices(c,s,e.trim_date);c.push({date_trimmed:e.trim_date,horses:r.map((e=>({hID:e.hID,horse_name:e.horse_name,type_trim:mapServiceToType({serviceType:e.predictedService||e.service_type,horseId:e.hID,trimmings:c})})))})}return calculateTimeFromPrediction(await predictHorsesAndServices(c,s,n),e.scheduleOptions)}catch(e){throw debugLog(),e}}function mapServiceToType({serviceType:e,horseId:r,trimmings:t}){for(let s=t.length-1;s>=0;s--){const n=t[s].horses.find((e=>String(e.hID)===String(r)));if(n&&getServiceType(n.type_trim)===e)return n.type_trim}switch(e){case"trim":return"trim:0";case"half_set":return"front_shoes:0";case"full_set":return"full_shoes:0";default:return`${e}:0`}}function calculateTimeFromHorses(e,r){const{avg_trim:t,half_set:s,full_set:n,drive_time:i}=r,o={horses:e,totalTime:parseInt(i),serviceBreakdown:{trims:0,halfSets:0,fullSets:0}};return e.forEach((e=>{switch(debugLog(e.service_type),e.service_type){case"trim":o.totalTime+=parseInt(t),o.serviceBreakdown.trims++;break;case"half_set":o.totalTime+=parseInt(s),o.serviceBreakdown.halfSets++;break;case"full_set":o.totalTime+=parseInt(n),o.serviceBreakdown.fullSets++}})),debugLog(),o}export async function predictHorsesAndServices(e,r,t){debugLog(),console.log("[Predicted Horses And Services]: trimmings:",e);const s=e.sort(((e,r)=>new Date(e.date_trimmed)-new Date(r.date_trimmed))),n=identifyServiceGroups(s);debugLog();const i=findNextDueGroup(n,r,t,s);if(debugLog(),!i&&r.length<=4)return checkIndividualHorses(s,r,t);if(!i&&r.length>4){const e=findMostFrequentGroupSize(s);return predictLargeHerdGroup(s,r,t,e)}return i.horses.map((e=>({...r.find((r=>r.hID===e)),predictedService:determineNextService(e,s)})))}function findMostFrequentGroupSize(e){const r=e.map((e=>e.horses.length)).reduce(((e,r)=>(e[r]=(e[r]||0)+1,e)),{});return parseInt(Object.entries(r).sort(((e,r)=>r[1]-e[1]))[0][0])}function predictLargeHerdGroup(e,r,t,s){const n=new Date(t),i=r.map((r=>{const t=[...e].reverse().find((e=>e.horses.some((e=>String(e.hID)===String(r.hID))))),s=parseInt(r.trim_cycle)||42,i=t?new Date(t.date_trimmed):null,o=i?(n-i)/864e5:Number.MAX_VALUE;return{horse:r,daysSinceService:o,dueScore:i?o/s:2,predictedService:determineNextService(String(r.hID),e)}})),o=r.length>=10?.85:.6;let c=i.filter((e=>e.dueScore>=o)).sort(((e,r)=>r.dueScore-e.dueScore));return debugLog(c.map((e=>`${e.horse.horse_name}: ${Math.round(100*e.dueScore)}%`))),r.length>=10&&(c.length>s?c=c.slice(0,s):c.length>0||(c=[i.sort(((e,r)=>r.dueScore-e.dueScore))[0]])),c.map((({horse:e,predictedService:r})=>({...e,predictedService:r||e.service_type||"trim"})))}function checkIndividualHorses(e,r,t){debugLog();const s=new Date(t),n=r.map((r=>{debugLog((r.horse_name,r.hID));const t=String(r.hID);debugLog(e.length),e.forEach(((e,r)=>{const t=e.horses.map((e=>e.hID));debugLog((e.date_trimmed,t.join(", ")))}));const n=e.filter((e=>e.horses&&e.horses.some((e=>String(e.hID)===t))));if(debugLog((n.length,r.horse_name)),0===n.length)return debugLog(r.horse_name),{horse:r,daysSinceService:Number.MAX_VALUE,dueScore:2,predictedService:r.service_type||"trim"};const i=[...n].sort(((e,r)=>new Date(e.date_trimmed)-new Date(r.date_trimmed))),o=i[i.length-1],c=new Date(o.date_trimmed),a=(s-c)/864e5,d=parseInt(r.trim_cycle)||42,u=a/d,h=determineNextService(t,e);return debugLog(r.horse_name,c.toISOString().split("T")[0]),{horse:r,daysSinceService:a,dueScore:u,predictedService:h}})),i=n.filter((e=>e.dueScore>=.6));if(debugLog(i.length,i.map((e=>`${e.horse.horse_name} (${Math.round(100*e.dueScore)}%)`))),i.length>0)return i.map((e=>({...e.horse,predictedService:e.predictedService})));const o=n.sort(((e,r)=>r.dueScore-e.dueScore))[0];return debugLog((o.horse.horse_name,Math.round(100*o.dueScore))),[{...o.horse,predictedService:o.predictedService}]}function identifyServiceGroups(e){debugLog();const r=new Map;e.forEach(((e,t)=>{debugLog();const s=e.horses.map((e=>e.hID)).sort().join(",");r.has(s)||r.set(s,{horses:e.horses.map((e=>e.hID)),dates:[],interval:0}),r.get(s).dates.push(new Date(e.date_trimmed))}));const t=Array.from(r.entries()).map((([e,r])=>{debugLog();const t=r.dates.sort(((e,r)=>e-r)),s=[];for(let e=1;e<t.length;e++){const r=(t[e]-t[e-1])/864e5;s.push(r)}const n={horses:r.horses,lastDate:t[t.length-1],interval:s.length>0?Math.round(s.reduce(((e,r)=>e+r))/s.length):42,frequency:t.length};return debugLog(),n}));return debugLog(),t}function findNextDueGroup(e,r,t,s){if(debugLog(),!e.length)return null;const n=new Date(t),i=e.map((t=>{if(!t.horses.every((e=>r.some((r=>r.hID===e)))))return{score:-1,group:t};const i=t.horses.map((e=>{const r=[...s].reverse().find((r=>r.horses.some((r=>r.hID===e))));return r?new Date(r.date_trimmed):null})).filter((e=>null!==e)),o=new Date(Math.max(...i)),c=(n-o)/864e5,a=t.horses.map((e=>r.find((r=>r.hID===e))?.trim_cycle||42)).reduce(((e,r)=>e+r),0),d=Math.round(a/t.horses.length),u=c/d,h=4===t.horses.length?3:t.horses.length/r.length,l=t.frequency/Math.max(...e.map((e=>e.frequency)))*2,m=t.frequency>=2?2:0,g=2*u+3*h+2*l+1.5*m;return debugLog(),{score:g,group:t}})).filter((e=>e.score>0)).sort(((e,r)=>r.score-e.score))[0];return debugLog(),i?i.group:null}function determineNextService(e,r){const t=r.filter((r=>r.horses.some((r=>r.hID===e)))).map((r=>getServiceType(r.horses.find((r=>r.hID===e)).type_trim)));return t.length>0?t[t.length-1]:"trim"}function calculateTimeFromPrediction(e,r){const{avg_trim:t,half_set:s,full_set:n,drive_time:i}=r,o={horses:e,totalTime:parseInt(i),serviceBreakdown:{trims:0,halfSets:0,fullSets:0}};return e.forEach((e=>{switch(e.predictedService||e.service_type){case"trim":o.totalTime+=parseInt(t),o.serviceBreakdown.trims++;break;case"half_set":o.totalTime+=parseInt(s),o.serviceBreakdown.halfSets++;break;case"full_set":o.totalTime+=parseInt(n),o.serviceBreakdown.fullSets++}})),o}function getServiceType(e){return e.includes("front_")?"half_set":e.includes("full_")?"full_set":"trim"}