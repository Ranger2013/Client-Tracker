// @ts-nocheck
import{getValidElement}from"../../utils/dom/elements.js";import{removeListeners}from"../../utils/dom/listeners.js";import{clearMsg,safeDisplayMessage}from"../../utils/dom/messages.js";import buildAppointmentBlock from"./components/buildAppointmentBlock.js";import buildNoAppointmentsBlock from"./components/buildNoAppointmentsBlock.js";import buildProjectedAppointmentBlock from"./components/buildProjectedAppointmentBlock.js";import getCurrentAppointments from"./components/getCurrentAppointments.js";import getProjectedAppointments from"./components/getProjectedAppointments.js";const COMPONENT_ID="check-appointment",COMPONENT="checkAppointment",DEBUG=!0,debugLog=(...e)=>{console.log(`[${COMPONENT}]`,...e)};export default async function checkAppointment({trimDate:e,trimCycle:t=null,appBlock:n,projAppBlock:o,clientInfo:i=null,manageClient:a,manageUser:p}){try{removeListeners(COMPONENT_ID),e=getValidElement(e),t=null===t?null:getValidElement(t),n=getValidElement(n),o=getValidElement(o);const s=document.getElementById(`${e.id}-error`),l=new Date(e.value.replace(/-/g,"/")).toDateString(),[m,r,c]=await Promise.all([p.getScheduleOptions(),p.getDateTimeOptions(),p.getUserBlockedDates()??[]]);if(0===Object.keys(m).length||0===Object.keys(r).length)throw new Error("User schedule options or date time formats are missing. Please update your settings.");c?.includes(e.value)?safeDisplayMessage({elementOrId:s,message:"You have blocked out this date.",targetId:s}):clearMsg({container:s,hide:!0,input:s});const[d,g]=await Promise.all([getCurrentAppointments({appointmentDate:e.value,scheduleOptions:m,dateTimeFormats:r,manageClient:a}),getProjectedAppointments({appointmentDate:e,trimCycle:t,clientInfo:i,scheduleOptions:m,manageClient:a})]);debugLog("bookedAppointments: ",d),d?.length>0?await buildAppointmentBlock({appointmentContainer:n,appointments:d,date:l,manageClient:a,manageUser:p,componentId:COMPONENT_ID}):await buildNoAppointmentsBlock({appointmentContainer:n,date:l}),g?.length>0&&await buildProjectedAppointmentBlock({appointmentContainer:o,data:g,date:l,manageClient:a,manageUser:p,componentId:COMPONENT_ID})}catch(e){const{AppError:t}=await import("../../errors/models/AppError.js");t.handleError(e,{errorCode:t.Types.RENDER_ERROR,userMessage:"Unable to check appointment availability.",displayTarget:n})}}