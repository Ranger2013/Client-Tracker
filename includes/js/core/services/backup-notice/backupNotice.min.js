// @ts-nocheck
import{getValidElement}from"../../utils/dom/elements.js";import{addListener}from"../../utils/dom/listeners.js";const TWO_HOURS=72e5,REMINDER_PATTERNS=["add","edit","delete","dateTime","farrierPrices","schedulingOptions","mileageCharges","colorOptions"],BACKUP_NOTICE_ID="backup-notice-component";export default async function setupBackupNotice({errorEleID:e,manageUser:t}){const r=getValidElement(e);try{await initializeBackupNotice({reminders:REMINDER_PATTERNS,displayElement:r,manageUser:t}),addListener({elementOrId:`${e}-close`,eventType:"click",handler:()=>closeBackupNotice({noticeEle:r,manageUser:t}),componentId:BACKUP_NOTICE_ID})}catch(e){const{AppError:t}=await import("../../errors/models/AppError.js");t.handleError(e,{originalError:e,errorCode:t.Types.BACKUP_ERROR,userMessage:"Error: Reminder system failed.",displayTarget:r})}}async function initializeBackupNotice({reminders:e,displayElement:t,manageUser:r}){try{const o=await r.getSettings(),i=await r.getStoreNames();if(shouldShowReminder(o)){const o=filterStores(i,e);await r.checkStoresForData(o)?updateNoticeContent(t,"You currently have data that needs to be backed up to the server."):hideBackupNotice(t)}}catch(e){const{AppError:r}=await import("../../errors/models/AppError.js");throw new r("Failed to initialize backup notice: ",{originalError:e,errorCode:r.Types.BACKUP_ERROR,userMessage:"Unable to check for pending backups",displayTarget:t})}}function shouldShowReminder(e){const t=e.reminders.status,r=e.reminders.timestamp,o=(new Date).getTime();return("default"===t||"yes"===t)&&(0===r||o-r>=72e5)}function updateNoticeContent(e,t,r=!1){const o=e.querySelector("#backup-data-notice-close");e.innerHTML="",o&&e.appendChild(o);const i=document.createElement("span");i.textContent=t,r&&i.classList.add("w3-text-red"),e.insertBefore(i,o),e.classList.remove("w3-hide")}function filterStores(e,t){return Object.keys(e).filter((e=>t.some((t=>e.toLowerCase().includes(t.toLowerCase()))))).reduce(((t,r)=>(t[r]=e[r],t)),{})}function hideBackupNotice(e){e.classList.add("w3-hide")}async function closeBackupNotice({noticeEle:e,manageUser:t}){try{const e=await t.getSettings();console.log("userSettings:",e)}catch(t){await errorLogs("backupNotice","Failed to close backup notice",t),updateNoticeContent(e,"Unable to update notification settings",!0)}}