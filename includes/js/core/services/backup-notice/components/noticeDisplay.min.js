// @ts-nocheck
import{getValidElement}from"../../utils/dom/elements.js";import{addListener}from"../../utils/dom/listeners.js";const TWO_HOURS=72e5,REMINDER_PATTERNS=["add","edit","delete","dateTime","farrierPrices","schedulingOptions","mileageCharges","colorOptions"],BACKUP_NOTICE_ID="backup-notice-component";export default async function setupBackupNotice({errorEleID:e}){try{const t=getValidElement(e);await initializeBackupNotice({reminders:REMINDER_PATTERNS,displayElement:t}),addListener({elementOrId:`${e}-close`,eventType:"click",handler:()=>closeBackupNotice(72e5),componentId:BACKUP_NOTICE_ID})}catch(t){new AppError("Backup notice system unavailable",{originalError:t,errorCode:AppError.Types.BACKUP_ERROR,userMessage:"Unable to check for pending backups",displayTarget:e,shouldLog:!0}).handle()}}async function initializeBackupNotice({reminders:e,displayElement:t}){try{const{default:o}=await import("../../database/IndexedDBOperations.js"),a=new o,i=await a.openDBPromise();if(shouldShowReminder(await a.getAllStorePromise(i,a.stores.USERSETTINGS))){const o=filterStores(a.stores,e);await checkStoresForData(i,o,a)?updateNoticeContent(t,"You currently have data that needs to be backed up to the server."):hideBackupNotice(t)}}catch(e){const{errorLogs:o}=await import("../../errors/services/errorLogs.js");await o("backupNotice","Failed to check backup status",e),updateNoticeContent(t,"Unable to check for pending backups",!0)}}function updateNoticeContent(e,t,o=!1){const a=e.querySelector("#backup-data-notice-close");e.innerHTML="",a&&e.appendChild(a);const i=document.createElement("span");i.textContent=t,o&&i.classList.add("w3-text-red"),e.insertBefore(i,a),e.classList.remove("w3-hide")}function clearPreviousMessage(e){e.lastChild&&e.lastChild.nodeType===Node.TEXT_NODE&&e.removeChild(e.lastChild)}function shouldShowReminder(e){if(e&&Object.keys(e).length>0){const t=e[0].reminders.status,o=e[0].reminders.timestamp,a=(new Date).getTime();return("default"===t||"yes"===t)&&(0===o||a-o>=72e5)}return!1}function filterStores(e,t){return Object.keys(e).filter((e=>t.some((t=>e.toLowerCase().includes(t.toLowerCase()))))).reduce(((t,o)=>(t[o]=e[o],t)),{})}async function checkStoresForData(e,t,o){for(let a in t){const i=await o.getAllStorePromise(e,t[a]);if(i&&i.length>0)return!0}return!1}function showBackupNotice(e){const t=document.createTextNode("You currently have data that needs to be backed up to the server.");e.append(t),e.classList.remove("w3-hide")}function hideBackupNotice(e){e.classList.add("w3-hide")}async function closeBackupNotice(e){const t=document.getElementById("backup-data-notice");try{const{default:e}=await import("../../database/IndexedDBOperations.js"),{removeListeners:o}=await import("../../utils/dom/listeners.js"),a=new e,i=await a.openDBPromise(),r=await a.getAllStorePromise(i,a.stores.USERSETTINGS);if(!r?.[0])throw new Error("No user settings found");r[0].reminders.timestamp=Date.now(),await a.clearStorePromise(i,a.stores.USERSETTINGS),await a.putStorePromise(i,r[0],a.stores.USERSETTINGS),hideBackupNotice(t),o(BACKUP_NOTICE_ID)}catch(e){await errorLogs("backupNotice","Failed to close backup notice",e),updateNoticeContent(t,"Unable to update notification settings",!0)}}