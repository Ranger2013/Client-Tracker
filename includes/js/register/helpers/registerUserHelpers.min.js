// @ts-nocheck
import{clearMsg,myError,mySuccess,top}from"../../utils/dom/domUtils.js";import openModal from"../../../js/utils/modal/openModal.js";import{getTermsAPI,registerUserAPI}from"../../utils/network/apiEndpoints.js";import{fetchData}from"../../utils/network/network.js";import{handleFormValidationErrors}from"../../utils/validation/validationUtils.js";export async function getTerms(r){const t={type:r};try{const r=await fetchData({api:getTermsAPI,data:t});r.message&&openModal({content:r.message})}catch(r){}}export async function handleUserRegistration(r){r.preventDefault();const{unexpectedErrorMsg:t,possibleConnectionErrorMsg:e}=await import("../../utils/error-messages/errorMessages.js"),s=document.getElementById("form-container"),o=document.getElementById("form-msg");mySuccess(o,"Registering...","w3-text-blue");const a=Object.fromEntries(new FormData(r.target));try{top();const r=await fetchData({api:registerUserAPI,data:a});"ok"===r.status?(clearMsg({container:o}),mySuccess(s,r.msg,"w3-text-black")):"form-errors"===r.status?(myError(o,r.msg),handleFormValidationErrors(r.errors)):"error"===r.status||"server-error"===r.status?myError(o,r.msg):myError(o,t)}catch(r){myError(o,e)}}