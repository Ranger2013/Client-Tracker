// @ts-nocheck
import{helpDeskTicket}from"../utils/error-messages/errorMessages.js";import IndexedDBOperations from"./IndexedDBOperations.js";export default class ManageClient{constructor(){this.indexed=new IndexedDBOperations}async getClientInfo({primaryKey:e}){try{if(!e)throw new Error("No primaryKey provided.");"string"==typeof e&&(e=parseInt(e,10));const t=await this.indexed.openDBPromise();return await this.indexed.getStorePromise(t,this.indexed.stores.CLIENTLIST,e)}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");throw await t("getClientInfoError","Get client info error: ",e),e}}async getAllDuplicateClients(){try{const e=await this.indexed.openDBPromise(),t=await this.indexed.getAllStorePromise(e,this.indexed.stores.CLIENTLIST),s=Object.entries(t.reduce(((e,t)=>(e[t.cID]=(e[t.cID]||0)+1,e)),{})).filter((([e,t])=>t>1)).map((([e])=>parseInt(e,10)));return t.filter((e=>s.includes(e.cID)))}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("getAllDuplicateClientsError","Get all duplicate clients error: ",e),{status:!1,msg:`Unable to get all the duplicate clients.<br>${helpDeskTicket}`}}}async addNewClient(e){try{if(!e)throw new Error("No user data provided.");const[t,s]=await Promise.all([this.indexed.getLastKeyForID(this.indexed.stores.MAXCLIENTID),this.indexed.getLastKeyForID(this.indexed.stores.MAXCLIENTPRIMARYKEY)]);e.cID=t,e.primaryKey=s;const r=await this.indexed.openDBPromise(),i=r.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.ADDCLIENT,this.indexed.stores.MAXCLIENTID,this.indexed.stores.MAXCLIENTPRIMARYKEY],"readwrite"),o=[];return o.push(this.indexed.addStorePromise(r,e,this.indexed.stores.CLIENTLIST,!1,i)),e.add_newClient=!0,o.push(this.indexed.putStorePromise(r,e,this.indexed.stores.ADDCLIENT,!1,i)),o.push(this.indexed.putStorePromise(r,{cID:t},this.indexed.stores.MAXCLIENTID,!0,i)),o.push(this.indexed.putStorePromise(r,{primaryKey:s},this.indexed.stores.MAXCLIENTPRIMARYKEY,!0,i)),await Promise.all(o),{status:!0,msg:`${e.client_name} has been added successfully.`,type:"add-client"}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("addNewClientError","Add new client error: ",e),{status:!1,msg:`Unable to add new client at this time.<br>${helpDeskTicket}`}}}async editClient(e,t,s){try{if(!t||!s)throw new Error("No cID or primaryKey provided.");const r=await this.indexed.openDBPromise(),i=r.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.EDITCLIENT],"readwrite"),o=await this.indexed.getAllStoreByIndexPromise(r,this.indexed.stores.CLIENTLIST,"cID",t,i),n=o.map((n=>{const d={...e,horses:o[0].horses||[],cID:t,primaryKey:s};return n.primaryKey!==s&&(d.trim_cycle=n.trim_cycle,d.trim_date=n.trim_date,d.app_time=n.app_time,d.primaryKey=n.primaryKey),this.indexed.putStorePromise(r,d,this.indexed.stores.CLIENTLIST,!1,i)})),d={...e,edit_client:!0,cID:t,primaryKey:s};return n.push(this.indexed.putStorePromise(r,d,this.indexed.stores.EDITCLIENT,!1,i)),await Promise.all(n),{status:!0,msg:`${e.client_name} has been updated successfully.`,type:"edit-client"}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("editClientError","Edit client error: ",e),{status:!1,msg:`Unable to edit client at this time.<br>${helpDeskTicket}`}}}async deleteClient(e,t){try{if(!t||!e)throw new Error("No primary key or cID provided.");t=parseInt(t,10);const s=await this.indexed.openDBPromise(),r=s.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.DELETECLIENT],"readwrite"),i=await this.indexed.getAllStoreByIndexPromise(s,this.indexed.stores.CLIENTLIST,"cID",e,r),o=i[0]?.client_name,n=i.map((e=>{this.indexed.deleteRecordPromise(e.primaryKey,this.indexed.stores.CLIENTLIST,r),this.indexed.deleteRecordPromise(e.cID,this.indexed.stores.TRIMMING,r)})),d={delete_client:!0,client_name:o,cID:e};return n.push(this.indexed.putStorePromise(s,d,this.indexed.stores.DELETECLIENT,!1,r)),await Promise.all(n),{status:!0,msg:"Client has been removed.",type:"delete-client"}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("deleteClientError","Delete client error: ",e),{status:!1,msg:`Unable to delete client at this time.<br>${helpDeskTicket}`}}}async addDuplicateClient(e){try{const{app_time:t,duplicate_client:s,next_trim_date:r,trim_cycle:i}=e,o=await this.indexed.getLastKeyForID(this.indexed.stores.MAXCLIENTPRIMARYKEY),n=await this.indexed.openDBPromise(),d=n.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.ADDDUPLICATECLIENT,this.indexed.stores.MAXCLIENTPRIMARYKEY],"readwrite"),a=[],l=await this.indexed.getStorePromise(n,this.indexed.stores.CLIENTLIST,parseInt(s,10),d),h={...l,primaryKey:o,app_time:t,trim_date:r,trim_cycle:i};return a.push(this.indexed.addStorePromise(n,h,this.indexed.stores.CLIENTLIST,!1,d)),h.add_duplicateClient=!0,a.push(this.indexed.putStorePromise(n,h,this.indexed.stores.ADDDUPLICATECLIENT,!1,d)),a.push(this.indexed.putStorePromise(n,{primaryKey:o},this.indexed.stores.MAXCLIENTPRIMARYKEY,!0,d)),await Promise.all(a),{status:"success",msg:`${l.client_name} has been duplicated successfully.`}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("addDuplicateClientError","Add duplicate client error: ",e),{status:!1,msg:`Unable to add duplicate client at this time.<br>${helpDeskTicket}`}}}async deleteDuplicateClient(e){try{if(!primaryKey)throw new Error("No primary key provided.");e.primaryKey=parseInt(primaryKey,10);const t=await this.indexed.openDBPromise(),s=t.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.DELETEDUPLICATECLIENT],"readwrite"),r={...e},i=[];return i.push(this.indexed.deleteRecordPromise(e.primaryKey,this.indexed.stores.CLIENTLIST,s)),i.push(this.indexed.putStorePromise(t,r,this.indexed.stores.DELETEDUPLICATECLIENT,!1,s)),await Promise.all(i),{status:!0,msg:"Duplicate client has been removed."}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("deleteDuplicateClientError","Delete duplicate client error: ",e),{status:!1,msg:`Unable to delete duplicate client at this time.<br>${helpDeskTicket}`}}}async addNewHorse(e,t,s){try{if(!t||!s)throw new Error("No cID or primaryKey provided.");const r=await this.indexed.getLastKeyForID(this.indexed.stores.MAXHORSEID),i=await this.indexed.openDBPromise(),o=i.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.ADDHORSE,this.indexed.stores.MAXHORSEID],"readwrite"),n=await this.indexed.getAllStoreByIndexPromise(i,this.indexed.stores.CLIENTLIST,"cID",t,o),d=n[0]?.horses||[],a=n[0]?.client_name;if(d.some((t=>t.horse_name.toLowerCase()===e.toLowerCase())))return{status:!1,msg:`${e} is already listed.`};const l={hID:r,horse_name:e};d.push(l);const h=[];for(const e of n){const t={...e,horses:d};h.push(this.indexed.putStorePromise(i,t,this.indexed.stores.CLIENTLIST,!1,o))}const c={add_newHorse:!0,horse_name:e,client_name:a,cID:t,hID:r};return h.push(this.indexed.putStorePromise(i,c,this.indexed.stores.ADDHORSE,!1,o)),h.push(this.indexed.putStorePromise(i,{hID:r},this.indexed.stores.MAXHORSEID,!0,o)),await Promise.all(h),{status:!0,msg:`${e} has been added.`}}catch(t){const{handleError:s}=await import("../utils/error-messages/handleError.js");return await s("addNewHorseError","Add new horse error: ",t),{status:!1,msg:`Unable to add ${e} at this time.<br>${helpDeskTicket}`}}}async editClientHorse(e,t,s){try{if(!e||!t)throw new Error("No horse id or client id provided.");"string"==typeof e&&(e=Number(e));const r=await this.indexed.openDBPromise(),i=r.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.EDITHORSE],"readwrite"),o=await this.indexed.getAllStoreByIndexPromise(r,this.indexed.stores.CLIENTLIST,"cID",t,i),n=o[0]?.client_name,d=[];for(const t of o){const o=t.horses.map((t=>t.hID===Number(e)?{...t,horse_name:s}:t)),n={...t,horses:o};d.push(this.indexed.putStorePromise(r,n,this.indexed.stores.CLIENTLIST,!1,i))}const a={hID:e,cID:t,horse_name:s,edit_clientHorse:!0,client_name:n};return d.push(this.indexed.putStorePromise(r,a,this.indexed.stores.EDITHORSE,!1,i)),await Promise.all(d),{status:!0,msg:`${s} has been updated.`}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js");return await t("editClientHorseError","Edit client horse error: ",e),{status:!1,msg:`Unable to edit ${s} at this time.<br>${helpDeskTicket}`}}}async deleteClientHorse(e,t){try{if(!e||!t)throw new Error("No horse id or client id provided.");"string"==typeof e&&(e=Number(e)),"string"==typeof t&&(t=Number(t));const s=await this.indexed.openDBPromise(),r=s.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.DELETEHORSE],"readwrite"),i=await this.indexed.getAllStoreByIndexPromise(s,this.indexed.stores.CLIENTLIST,"cID",t,r),o=i[0]?.client_name,n=[];for(const t of i){const i=t.horses.filter((t=>t.hID!==Number(e))),o={...t,horses:i};n.push(this.indexed.putStorePromise(s,o,this.indexed.stores.CLIENTLIST,!1,r))}const d={hID:e,cID:t,delete_clientHorse:!0,client_name:o};return n.push(this.indexed.putStorePromise(s,d,this.indexed.stores.DELETEHORSE,!1,r)),await Promise.all(n),r.oncomplete=()=>{console.log("Transaction completed successfully.")},r.onerror=e=>{throw console.error("Transaction failed:",e),new Error("Transaction failed: "+e.target.error)},{status:!0,msg:"Horse has been deleted."}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js");return await t("deleteClientHorseError","Delete client horse error: ",e),{status:!1,msg:`Unable to delete horse at this time.<br>${helpDeskTicket}`}}}async getClientScheduleList(){try{const e=await this.indexed.openDBPromise();return await this.indexed.getAllStorePromise(e,this.indexed.stores.CLIENTLIST)||[]}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");throw await t("getClientScheduleListError","Get client schedule list error: ",e),e}}async getAllClientsTrimmingInfo(){try{const e=await this.indexed.openDBPromise(),t=await this.indexed.getAllStorePromise(e,this.indexed.stores.TRIMMING);return t?.trimmings||[]}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");throw await t("getAllClientsTrimmingInfoError","Get all clients trimming info error: ",e),e}}async getClientTrimmingInfo(e){try{const t=await this.indexed.openDBPromise(),s=await this.indexed.getStorePromise(t,this.indexed.stores.TRIMMING,e);return s?.trimmings||[]}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("getClientTrimmingInfoError","Get client trimming info error: ",e),[]}}async updateClientSchedule(e){try{const{next_trim_date:t,app_time:s,...r}=e;console.log("In updateClientSchedule: ",{next_trim_date:t,app_time:s,userDataRest:r});const i=await this.indexed.openDBPromise(),o=i.transaction([this.indexed.stores.CLIENTLIST,this.indexed.stores.EDITCLIENT],"readwrite"),n=[],d={...await this.indexed.getStorePromise(i,this.indexed.stores.CLIENTLIST,e.primaryKey,o),app_time:s,trim_date:t};return console.log("newClientInfo: ",d),n.push(this.indexed.putStorePromise(i,d,this.indexed.stores.CLIENTLIST,!1,o)),d.edit_client=!0,n.push(this.indexed.putStorePromise(i,d,this.indexed.stores.EDITCLIENT,!1,o)),await Promise.all(n),{status:!0,msg:"Client schedule updated successfully."}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("updateClientScheduleError","Update client schedule error: ",e),{status:!1,msg:`Unable to update the client schedule.<br>${helpDeskTicket}`}}}}