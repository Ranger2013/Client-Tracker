// @ts-nocheck
import{fetchData}from"../utils/network/network.js";import IndexedDBOperations from"./IndexedDBOperations.js";import ManageClient from"./ManageClient.js";export default class ManageTrimming{constructor(){this.indexed=new IndexedDBOperations,this.manageClient=new ManageClient}async handleAddTrimmingSession(e,t){try{const[r,s]=await Promise.all([this.manageClient.getClientTrimmingInfo(t.cID),this.indexed.getLastKeyForID(this.indexed.stores.MAXTRIMID)]),i=this.setTrimmingDataStructureForBackupData(e,t,s),a=await this.setTrimmingStoreData(t.cID,r);i.horses=await this.extractHorseData(e);const n=await this.addTrimSession(i,a);if("error"===n.status)throw new Error(n.msg);const o=await this.handleSendingReceipt(e,i);i.userData=e;await this.manageClient.updateClientSchedule(e);return{...n,...o}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js");throw await t("addTrimSessionError","Add trimming session error: ",e),e}}setTrimmingDataStructureForBackupData(e,t,r){return{add_trimming:!0,trimID:r,cID:t.cID,mileage_cost:e?.mileage_cost||"0",receipt:e?.receipt||"no",session_notes:e.session_notes,payment_amount:e.payment,date_trimmed:e.trim_date,paid:e?.paid||"no",invoice_sent:"no"}}async setTrimmingStoreData(e,t){return{cID:e,trimmings:t}}async handleSendingReceipt(e,t){try{if(void 0===e.receipt)return{receipt_status:"no-receipt",receipt_msg:""};const[{getValidationToken:r},{sendReceiptAPI:s}]=await Promise.all([import("../tracker.js"),import("../utils/network/apiEndpoints.js")]),i=r(),a=await fetchData({api:s,data:e,token:i});if("ok"===a.status)return t.receipt_sent="yes",{receipt_status:"receipt-sent",receipt_msg:"<div>Receipt sent.</div>"};if("error"===a.status){t.app_time=e.app_time,t.receipt_sent="no";const{helpDeskTicket:r}=await import("../utils/error-messages/errorMessages.js");return{receipt_status:"no-receipt-sent",receipt_msg:`<div class="w3-text-red">Server Error: Problem on the server prevented the receipt from being sent.</div><div class="w3-text-red">The receipt should auto-send when you back up your data. If it does not, then ${r}</div>`}}return t.app_time=e.app_time,t.receipt_sent="no",{receipt_status:"unknown-error",receipt_msg:'<div class="w3-text-red">Unknown error.</div><div class="w3-text-red">The system will try again when you backup your data.</div>'}}catch(e){const{handleError:r}=await import("../utils/error-messages/handleError.js");return await r("handleSendingReceiptError","Handle sending receipt error: ",e),t.receipt_sent="no",{receipt_status:"no-receipt-sent",receipt_msg:'<div class="w3-text-red">Receipt not sent due to being offline.</div><div class="w3-text-red">The system will retry when you back up your data.</div>'}}}async extractHorseData({number_horses:e,...t}){try{const r=[];for(let s=1;s<=e;s++){const[e,i]=t[`horse_list_${s}`].split(":"),a=t[`accessories_${s}`]||[],n=t[`service_cost_${s}`];r.push({hID:Number(e),horse_name:i,type_trim:n,acc:a})}return r}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js");return await t("extractHorseDataError","Extract horse data error: ",e),[]}}async addTrimSession(e,t){try{const r={...e},s=await this.indexed.openDBPromise(),i=s.transaction([this.indexed.stores.MAXTRIMID,this.indexed.stores.ADDTRIMMING,this.indexed.stores.TRIMMING],"readwrite");console.log("In addTrimSession: backupData: ",r),console.log("In addTrimSession: trimmingStoreData: ",t),console.log("In addTrimSession: backuptrimmingDataStructure: ",e);const a=this.indexed.putStorePromise(s,e,this.indexed.stores.ADDTRIMMING,!1,i),n=this.indexed.putStorePromise(s,{trimID:e.trimID},this.indexed.stores.MAXTRIMID,!0,i),o=e.cID;delete r.cID,delete r.add_trimming,delete r.userData,t.trimmings.push(r);const d=this.indexed.putStorePromise(s,t,this.indexed.stores.TRIMMING,!1,i);return await Promise.all([a,n,d]),await this.cleanupTrimmings(o),{status:"success",msg:"Trimming successfully added."}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js"),{helpDeskTicket:r}=await import("../utils/error-messages/errorMessages.js");return await t("addTrimSessionError","Add trimming session error: ",e),{status:"error",msg:`Unable to add trimming session at this time.<br>${r}`}}}async cleanupTrimmings(e){try{const t=await this.manageClient.getClientTrimmingInfo(Number(e));if(t&&t.length>9){t.shift();const r=await this.setTrimmingStoreData(e,t),s=await this.indexed.openDBPromise();this.indexed.putStorePromise(s,r,this.indexed.stores.TRIMMING)}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js");await t("cleanupTrimmingsError","Cleanup trimmings error: ",e)}}}