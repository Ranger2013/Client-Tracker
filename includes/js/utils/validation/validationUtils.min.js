// @ts-nocheck
import{clearMsg,disableEnableSubmitButton,myError}from"../dom/domUtils.js";import{fetchData}from"../network/network.js";import{checkForDuplicatesAPI}from"../network/apiEndpoints.js";import{underscoreToHyphen,underscoreToHyphenPlusError}from"../string/stringUtils.js";const fm=document.getElementById("form-msg"),submitButton=document.getElementById("submit-button");export async function checkForDuplicate(t,e,r,n){try{const a={value:t.target.value,column:r,userType:n},o=await fetchData({api:checkForDuplicatesAPI,data:a});"ok"===o.status?(clearMsg({container:e,hide:!0,input:t.target}),disableEnableSubmitButton(submitButton)):"duplicate"===o.status?(myError(e,o.msg,t.target),disableEnableSubmitButton(submitButton)):"unexpected-error"!==o.status&&"server-error"!==o.status||(myError(fm,o.msg),disableEnableSubmitButton(submitButton))}catch(t){console.warn(t)}}export function formatPhone(t,e){let r=(""+t.target.value).replace(/\D/g,"").match(/^(\d{3})(\d{3})(\d{4})$/);if(r){let n=r[1]+"-"+r[2]+"-"+r[3];t.target.value=n,clearMsg({container:e,hide:!0}),disableEnableSubmitButton(submitButton)}else myError(e,"Please use the correct format."),disableEnableSubmitButton(submitButton)}export async function comparePasswords(t,e,r,n){const a=r;document.getElementById(e).value!==t.target.value?(myError(a,"Passwords do not match"),disableEnableSubmitButton(n)):(clearMsg({container:a,hide:!0}),disableEnableSubmitButton(n))}export async function checkPasswordStrength(t,e,r,n){const a=t.target.value;if(clearMsg({container:r,hide:!0}),clearMsg({container:e,hide:!0}),""===a)return!1;const o=(t,r)=>{e.innerHTML=`<div class="${r} w3-padding-small w3-center">${t}</div>`,e.classList.remove("w3-hide")};return a.length<8?(o("Passwords must be at least 8 characters","w3-yellow error"),disableEnableSubmitButton(n),!1):/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\W])(?=.{8,})/.test(a)?(o("Strong","w3-green"),disableEnableSubmitButton(n),!0):/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.{8,})/.test(a)?(o("Medium","w3-blue"),disableEnableSubmitButton(n),!0):(o("Please make a stronger password using Upper case, Lower case, numbers and special characters","w3-red error"),disableEnableSubmitButton(n),!1)}export function handleFormValidationErrors(t){try{for(const e in t){const r=document.getElementById(underscoreToHyphenPlusError(e)),n=document.getElementById(underscoreToHyphen(e));myError(r,t[e],n)}}catch(t){console.warn("Handle form validation errors Error: ",t)}}export function validateDateFormat(t,e){const r=["Y-m-d","m-d-Y","d-m-Y"];for(const n of r)if(n===t.target.value)return clearMsg({container:e,input:t.target}),void disableEnableSubmitButton(submitButton);myError(e,"Please select a valid date format.",t.target),disableEnableSubmitButton(submitButton)}export function validateTimeZone(t,e){const r={"America/New_York":"Eastern Time Zone","America/Chicago":"Central Time Zone","America/Denver":"Mountain Time Zone","America/Phoenix":"Mountain Time No DST","America/Los_Angeles":"Pacific Time Zone","America/Anchorage":"Alaska Time Zone"};let n=!1;for(const e in r)if(e.toLowerCase()===t.target.value.toLowerCase()){n=!0;break}n?(clearMsg({container:e,input:t.target}),disableEnableSubmitButton(submitButton)):(myError(e,"Please select a valid time zone.",t.target),disableEnableSubmitButton(submitButton))}export function isNumeric(t,e=!1){return e?/^(?:\d+|\d*\.\d{1,2}|\s*)$/.test(t):/^(?:\d+|\d*\.\d{1,2})$/.test(t)}export function validateRange(t){const e=t.match(/(\d{1,})-(\d{1,})\+?/);if(!e)return!1;return!(parseInt(e[1],10)>=parseInt(e[2],10))}export function validateDate(t){return/^\d{4}-\d{2}-\d{2}$/.test(t)}