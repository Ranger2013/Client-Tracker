// @ts-nocheck
import IndexedDBOperations from"../../classes/IndexedDBOperations.js";const TWO_HOURS=72e5,REMINDER_PATTERNS=["add","edit","delete","dateTime","farrierPrices","schedulingOptions","mileageCharges","colorOptions"];export default async function setupBackupNotice(){await updateBackupNotice(),document.getElementById("backup-data-notice-close").addEventListener("click",closeBackupNotice)}async function updateBackupNotice(){const e=document.getElementById("backup-data-notice");clearPreviousMessage(e);const t=new IndexedDBOperations;try{const o=await t.openDBPromise();if(shouldShowReminder(await t.getAllStorePromise(o,t.stores.USERSETTINGS))){const r=filterStores(t.stores,REMINDER_PATTERNS);await checkStoresForData(o,r,t)?showBackupNotice(e):hideBackupNotice(e)}}catch(e){handleError("updateBackupNoticeError","Update Backup Notice Error: ",e)}}function clearPreviousMessage(e){e.lastChild&&e.lastChild.nodeType===Node.TEXT_NODE&&e.removeChild(e.lastChild)}function shouldShowReminder(e){if(e&&Object.keys(e).length>0){const t=e[0].reminders.status,o=e[0].reminders.timestamp,r=(new Date).getTime();return("default"===t||"yes"===t)&&(0===o||r-o>=72e5)}return!1}function filterStores(e,t){return Object.keys(e).filter((e=>t.some((t=>e.toLowerCase().includes(t.toLowerCase()))))).reduce(((t,o)=>(t[o]=e[o],t)),{})}async function checkStoresForData(e,t,o){for(let r in t){const a=await o.getAllStorePromise(e,t[r]);if(a&&a.length>0)return!0}return!1}function showBackupNotice(e){const t=document.createTextNode("You currently have data that needs to be backed up to the server.");e.append(t),e.classList.remove("w3-hide")}function hideBackupNotice(e){e.classList.add("w3-hide")}async function closeBackupNotice(){const e=new IndexedDBOperations;try{const t=await e.openDBPromise(),o=await e.getAllStorePromise(t,e.stores.USERSETTINGS);o[0].reminders.timestamp=(new Date).getTime(),await e.clearStorePromise(t,e.stores.USERSETTINGS),await e.putStorePromise(t,o[0],e.stores.USERSETTINGS),hideBackupNotice(document.getElementById("backup-data-notice"))}catch(e){handleError("closeBackupNoticeError","Close Backup Notice Error: ",e)}}async function handleError(e,t,o){const{default:r}=await import("../../utils/error-messages/errorLogs.js");await r(e,t,o)}