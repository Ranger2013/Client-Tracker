// @ts-nocheck
import ManageClient from"../../../../../../classes/ManageClient.js";import{buildEle,clearMsg}from"../../../../../dom/domUtils.js";import{addListener,removeAllListeners}from"../../../../../event-listeners/listeners.js";import{cleanUserOutput}from"../../../../../string/stringUtils.js";import buildPageContainer from"../../../../helpers/buildPageContainer.js";import buildSubmitDeleteButtonSection from"../../../../helpers/buildSubmitDeleteButtonSection.js";import buildTwoColumnInputSection from"../../../../helpers/buildTwoColumnInputSection.js";import buildTwoColumnSelectElementSection from"../../../../helpers/buildTwoColumnSelectElementSection.js";export default async function buildEditHorsePage({cID:e,primaryKey:t,mainContainer:i}){try{if(clearMsg({container:"page-msg"}),!e&&!t){const{default:e}=await import("../helpers/buildNoClientAvailablePage.js");return void await e(i)}const r=new ManageClient,n=await r.getClientInfo({primaryKey:t}),a=n?.client_name||"No Name ",l=n?.horses||[],o=l.map((e=>({value:e.hID,text:e.horse_name})));o.unshift({value:"null",text:"-- Select a Horse --"});const[[s,d],u]=await Promise.all([buildPageContainer({pageTitle:"Edit Horse for ",clientName:a,cID:e,primaryKey:t}),buildTwoColumnSelectElementSection({labelText:"Select a Horse:",selectID:"horse-list",selectName:"horse_id",selectTitle:"Horse's Name",options:o})]),m=buildEle({type:"div",attributes:{id:"form-msg"},myClass:["w3-center"]}),p=buildEle({type:"div",attributes:{id:"horse-container"}});return i.innerHTML="",s.appendChild(d),d.appendChild(m),d.appendChild(u),d.appendChild(p),i.appendChild(s),addListener("horse-list","change",(async i=>{if("null"===i.target.value)return void(p.innerHTML="");const r=await buildEditForm(i,t);p.innerHTML="",p.appendChild(r);const{default:n}=await import("../../../../../../pages/client-menu/client-horses/edit/editHorseJS.js");await n({cID:e,mainContainer:p,clientHorses:l})})),removeAllListeners}catch(e){const{handleError:t}=await import("../../../../../error-messages/handleError.js");await t("buildEditHorsePageError","Error building the edit horse page:",e,"Unable to display the edit horse page. Please try again later.","page-msg")}}async function buildEditForm(e,t){try{const i=e.target.value,r=e.target.options[e.target.selectedIndex].text,n=buildEle({type:"form",attributes:{id:"edit-horse-form"}});[{type:"input",attributes:{type:"hidden",name:"hID",value:i}},{type:"input",attributes:{type:"hidden",name:"primaryKey",value:t}}].forEach((e=>{n.appendChild(buildEle(e))}));const[a,l]=await Promise.all([buildTwoColumnInputSection({labelText:"Horse's Name: ",inputID:"horse-name",inputType:"text",inputName:"horse_name",inputValue:cleanUserOutput(r),inputTitle:"Horse's Name",required:!0}),buildSubmitDeleteButtonSection({submitButtonText:"Edit Horse",deleteButtonText:"Delete Horse"})]);return n.appendChild(a),n.appendChild(l),n}catch(e){const{handleError:t}=await import("../../../../../../utils/error-messages/handleError.js");throw await t("buildEditFormError","Build edit form error: ",e),e}}