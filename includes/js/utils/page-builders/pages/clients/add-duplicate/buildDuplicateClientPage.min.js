// @ts-nocheck
import ManageClient from"../../../../../classes/ManageClient.js";import{buildEle,clearMsg}from"../../../../dom/domUtils.js";import{removeAllListeners}from"../../../../event-listeners/listeners.js";import{cleanUserOutput}from"../../../../string/stringUtils.js";import buildPageContainer from"../../../helpers/buildPageContainer.js";import buildSubmitButtonSection from"../../../helpers/buildSubmitButtonSection.js";import buildTwoColumnInputSection from"../../../helpers/buildTwoColumnInputSection.js";import buildTwoColumnSelectElementSection from"../../../helpers/buildTwoColumnSelectElementSection.js";export default async function buildDuplicateClientPage({cID:e,primaryKey:t,mainContainer:i}){try{clearMsg({container:"page-msg"});const e=await getClientList(),[[t,l],n,a,r]=await Promise.all([buildPageContainer({pageTitle:"Duplicate a Current Client"}),buildTwoColumnInputSection({labelText:"Filter Client List:",inputID:"filter-client",inputType:"text",inputTitle:"Filter Client List",required:!1}),buildTwoColumnSelectElementSection({labelText:"Select a Client:",selectID:"duplicate-client",selectName:"duplicate_client",selectTitle:"Select a Client to Duplicate",required:!0,options:e}),buildSubmitButtonSection("Duplicate Client")]),o=buildEle({type:"form",attributes:{id:"duplicate-form"}}),s=buildEle({type:"div",attributes:{id:"client-container"}});t.appendChild(l),l.appendChild(o),o.appendChild(n),o.appendChild(a),o.appendChild(s),o.appendChild(r),i.innerHTML="",i.appendChild(t);const{default:u}=await import("../../../../../pages/clients/duplicate-client/duplicateClientJS.js");return await u({clientContainer:s}),removeAllListeners}catch(e){const{handleError:t}=await import("../../../../error-messages/handleError.js");await t("buildDuplicateClientPageError","Error building duplicate client page: ",e,"Unable to build the duplicate client page. Please try again later.","page-msg")}}async function getClientList(){try{const e=new ManageClient,t=await e.getClientScheduleList(),i={value:"null",text:"-- Select a Client --",selected:!0,disabled:!0};return t?.length?[i,...t.map((e=>({value:e.primaryKey,text:cleanUserOutput(e.client_name),selected:!1})))]:[i]}catch(e){const{handleError:t}=await import("../../../../error-messages/handleError.js");await t("getClientListError","Error getting client list: ",e,"Unable to show the duplicate client page.","page-msg")}}