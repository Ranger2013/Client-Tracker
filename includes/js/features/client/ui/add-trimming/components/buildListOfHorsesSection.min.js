// @ts-nocheck
import{buildGenericSelectOptions,disableEnableSubmitButton,getValidElement}from"../../../../../core/utils/dom/elements.js";import{clearMsg}from"../../../../../core/utils/dom/messages.js";import{cleanUserOutput,ucwords,underscoreToSpaces}from"../../../../../core/utils/string/stringUtils.js";import autoFillHorseList from"./autoFillHorseList.js";import calculateTotalCost from"./calculateTotalCost.js";import{updateTrimCost}from"./updateTrimCost.js";import{prevOptions}from"../addTrimmingJS.js";const COMPONENT="BuildListOfHorsesSection",DEBUG=!1,debugLog=(...e)=>{false};export default async function buildListOfHorsesSection({evt:e,horseListContainer:t,primaryKey:r,manageClient:s,manageUser:o}){try{clearMsg({container:"form-msg"});const i=(t=getValidElement(t)).children.length,{clientInfo:n,clientTrimCycle:a,clientHorses:c,totalHorses:l,farrierPrices:p,accessoryPrices:u}=await getPageData({manageUser:o,manageClient:s,primaryKey:r});debugLog();if(!Object.values(p).some((e=>""!==e&&"0.00"!==e&&0!==e)))throw new Error("Please update your farrier prices settings.");const m=getOptionsConfig({clientHorses:c,userFarrierPrices:p,accessoryPrices:u});renderPage({container:t,horseList:await handleShowingNumberOfHorses({evt:e,horseListContainer:t,clientTotalHorses:l,optionsConfig:m,containerChildren:i})}),await autoUpdateServiceCost(t);const d=document.getElementById("number-horses").value;await updateTrimCost({blockElementNode:t,numberHorses:d,userFarrierPrices:p}),disableEnableSubmitButton("submit-button")}catch(e){const{AppError:t}=await import("../../../../../core/errors/models/AppError.js");t.process(e,{errorCode:t.Types.RENDER_ERROR,userMessage:"Unable to render the list of horses section. Please update your farrier prices settings.",displayTarget:"number-horses-error"},!0)}}function renderPage({container:e,horseList:t}){const r=document.createDocumentFragment();r.append(...t),e.appendChild(r)}async function getPageData({manageUser:e,manageClient:t,primaryKey:r}){try{const[s,o]=await Promise.all([t.getClientInfo({primaryKey:r}),e.getFarrierPrices()]),{accessories:i,...n}=o;if(!i||0===Object.keys(n).length)throw new Error("Please update your farrier prices settings.");const a=s?.trim_cycle,c=s?.horses.sort(((e,t)=>{const r=e.trim_cycle===a,s=t.trim_cycle===a;return r&&!s?-1:!r&&s?1:e.horse_name.localeCompare(t.horse_name)}))||[],l=c.length;return{clientInfo:s,clientTrimCycle:a,clientHorses:c,totalHorses:l,accessoryPrices:i,farrierPrices:n}}catch(e){const{AppError:t}=await import("../../../../../core/errors/models/AppError.js");t.process(e,{errorCode:t.Types.PROCESSING_ERROR,userMessage:"Unable to get client data."},!0)}}function getOptionsConfig({clientHorses:e,userFarrierPrices:t,accessoryPrices:r}){return{horseListOptionsConfig:{list:e,value:e=>`${e.hID}:${e.horse_name}`,text:e=>e.horse_name,attributes:e=>({"data-service-type":e.service_type,"data-trim-cycle":e.trim_cycle})},farrierPricesOptionsConfig:{list:Object.entries(t).filter((([e,t])=>""!==t&&"0.00"!==t&&0!==t)).reduce(((e,[t,r])=>{const s=t.includes("trim");return s&&!e.trim?(e.trim=!0,e.list.push({shoe:"trim",price:"xxx"})):s||e.list.push({shoe:t,price:r}),e}),{trim:!1,list:[]}).list,value:e=>`${e.shoe}:${e.price}`,text:e=>ucwords(underscoreToSpaces(e.shoe))},accessoryOptionsConfig:{list:Object.entries(r).filter((([e,t])=>t.length>0)).flatMap((([e,t])=>t.map((t=>({type:e,acc:t.name||e,price:t.cost}))))),value:e=>`${e.type}:${e.acc}:${e.price}`,text:e=>ucwords(e.acc)}}}async function handleShowingNumberOfHorses({evt:e,horseListContainer:t,clientTotalHorses:r,farrierPrices:s,optionsConfig:o,containerChildren:i}){try{let s=parseInt(e.target.value,10);if(prevOptions.clear(),s>=r){s>r&&(s=r,e.target.value=r),t.innerHTML="";const i=await autoFillHorseList({totalHorses:r,optionsConfig:o});return i.map((e=>e.querySelector('select[id^="horse-list-"]'))).forEach((e=>{const t=e.options[e.selectedIndex];Array.from(e.options).forEach((r=>{r!==t&&e.removeChild(r)}))})),i}if(s<i){let e=i,r=[];const[o,n]=await Promise.all([import("./removeLastChildAndGetOptions.js"),import("./addOptionToRemainingHorseListSelectElements.js")]),{default:a}=o,{default:c}=n;for(;e>s;){const s=await a(t);s&&r.push(s),e--}r.forEach((e=>c({container:t,optionWithIndex:e})));return t.querySelectorAll('select[id^="horse-list-"]').forEach((e=>{const t=e.options[e.selectedIndex];prevOptions.set(e.id,t)})),[]}debugLog(),t.innerHTML="";const n=await autoFillHorseList({totalHorses:s,optionsConfig:o});return initializeHorseSelections(n),n}catch(e){throw e}}function initializeHorseSelections(e){prevOptions.clear();const t=e.map((e=>{const t=e.querySelector('select[id^="horse-list-"]'),r=t.options[t.selectedIndex];return prevOptions.set(t.id,r),r.value}));e.map((e=>e.querySelector('select[id^="horse-list-"]'))).forEach((e=>{const r=e.options[e.selectedIndex];Array.from(e.options).forEach((s=>{s!==r&&t.includes(s.value)&&e.removeChild(s)}))})),debugLog()}function autoUpdateServiceCost(e){try{const t={trim:"trim",half_set:"front_",full_set:"full_"};e.querySelectorAll('select[id^="horse-list-"]').forEach((r=>{const s=r.id.split("-").pop(),o=e.querySelector(`select[id="service-cost-${s}"]`),i=r.options[r.selectedIndex],n=Array.from(o.options).find((e=>e.value.includes(t[i.dataset.serviceType])));n&&(n.selected=!0);const a=new Event("change",{bubbles:!0,cancelable:!0});Object.defineProperty(a,"target",{value:o}),o.dispatchEvent(a)}))}catch(e){console.warn("Error in autoUpdateServiceCost: ",e)}}