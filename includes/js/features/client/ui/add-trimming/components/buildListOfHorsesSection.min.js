// @ts-nocheck
import{buildGenericSelectOptions,disableEnableSubmitButton,getValidElement}from"../../../../../core/utils/dom/elements.min.js";import{clearMsg}from"../../../../../core/utils/dom/messages.min.js";import{cleanUserOutput,ucwords,underscoreToSpaces}from"../../../../../core/utils/string/stringUtils.min.js";import autoFillHorseList from"./autoFillHorseList.min.js";import calculateTotalCost from"./calculateTotalCost.min.js";import{updateTrimCost}from"./updateTrimCost.min.js";import{prevOptions}from"../addTrimmingJS.min.js";const COMPONENT="BuildListOfHorsesSection",DEBUG=!1,debugLog=(...e)=>{false};export default async function buildListOfHorsesSection({evt:e,horseListContainer:t,primaryKey:r,manageClient:o,manageUser:i}){try{clearMsg({container:"form-msg"});const s=(t=getValidElement(t)).children.length,n=await o.getClientInfo({primaryKey:r}),a=n?.trim_cycle,c=n?.horses.sort(((e,t)=>{const r=e.trim_cycle===a,o=t.trim_cycle===a;return r&&!o?-1:!r&&o?1:e.horse_name.localeCompare(t.horse_name)}))||[],l=c.length,u=await i.getFarrierPrices(),{accessories:m,...p}=u,d=getOptionsConfig({clientHorses:c,userFarrierPrices:u});debugLog();const f=await handleShowingNumberOfHorses({evt:e,horseListContainer:t,clientTotalHorses:l,farrierPrices:p,optionsConfig:d,containerChildren:s});f?.forEach((e=>t.appendChild(e))),await autoUpdateServiceCost(t);const h=document.getElementById("number-horses").value;await Promise.all([updateTrimCost({blockElementNode:t,numberHorses:h,userFarrierPrices:p}),calculateTotalCost()]),disableEnableSubmitButton("submit-button")}catch(e){throw e}}function getOptionsConfig({clientHorses:e,userFarrierPrices:t}){const{accessories:r,...o}=t;return{horseListOptionsConfig:{list:e,value:e=>`${e.hID}:${e.horse_name}`,text:e=>e.horse_name,attributes:e=>({"data-service-type":e.service_type,"data-trim-cycle":e.trim_cycle})},farrierPricesOptionsConfig:{list:Object.entries(o).filter((([e,t])=>""!==t&&"0.00"!==t&&0!==t)).reduce(((e,[t,r])=>{const o=t.includes("trim");return o&&!e.trim?(e.trim=!0,e.list.push({shoe:"trim",price:"xxx"})):o||e.list.push({shoe:t,price:r}),e}),{trim:!1,list:[]}).list,value:e=>`${e.shoe}:${e.price}`,text:e=>ucwords(underscoreToSpaces(e.shoe))},accessoryOptionsConfig:{list:Object.entries(r).filter((([e,t])=>t.length>0)).flatMap((([e,t])=>t.map((t=>({type:e,acc:t.name||e,price:t.cost}))))),value:e=>`${e.type}:${e.acc}:${e.price}`,text:e=>ucwords(e.acc)}}}async function handleShowingNumberOfHorses({evt:e,horseListContainer:t,clientTotalHorses:r,farrierPrices:o,optionsConfig:i,containerChildren:s}){try{let o=parseInt(e.target.value,10);if(prevOptions.clear(),o>=r){o>r&&(o=r,e.target.value=r),t.innerHTML="",debugLog(),debugLog();const s=await autoFillHorseList({totalHorses:r,optionsConfig:i});return s.map((e=>e.querySelector('select[id^="horse-list-"]'))).forEach((e=>{const t=e.options[e.selectedIndex];Array.from(e.options).forEach((r=>{r!==t&&e.removeChild(r)}))})),s}if(o<s){let e=s,r=[];const[i,n]=await Promise.all([import("./removeLastChildAndGetOptions.min.js"),import("./addOptionToRemainingHorseListSelectElements.min.js")]),{default:a}=i,{default:c}=n;for(;e>o;){const o=await a(t);o&&r.push(o),e--}r.forEach((e=>c({container:t,optionWithIndex:e})));return t.querySelectorAll('select[id^="horse-list-"]').forEach((e=>{const t=e.options[e.selectedIndex];prevOptions.set(e.id,t)})),[]}debugLog(),t.innerHTML="";const n=await autoFillHorseList({totalHorses:o,optionsConfig:i});return initializeHorseSelections(n),n}catch(e){throw e}}function initializeHorseSelections(e){prevOptions.clear();const t=e.map((e=>{const t=e.querySelector('select[id^="horse-list-"]'),r=t.options[t.selectedIndex];return prevOptions.set(t.id,r),r.value}));e.map((e=>e.querySelector('select[id^="horse-list-"]'))).forEach((e=>{const r=e.options[e.selectedIndex];Array.from(e.options).forEach((o=>{o!==r&&t.includes(o.value)&&e.removeChild(o)}))})),debugLog()}function autoUpdateServiceCost(e){try{const t={trim:"trim",half_set:"front_",full_set:"full_"};e.querySelectorAll('select[id^="horse-list-"]').forEach((r=>{const o=r.id.split("-").pop(),i=e.querySelector(`select[id="service-cost-${o}"]`),s=r.options[r.selectedIndex],n=Array.from(i.options).find((e=>e.value.includes(t[s.dataset.serviceType])));if(n){n.selected=!0;const e=new Event("change",{bubbles:!0,cancelable:!0});Object.defineProperty(e,"target",{value:i}),i.dispatchEvent(e)}}))}catch(e){console.warn("Error in autoUpdateServiceCost: ",e)}}