// @ts-nocheck
import{disableEnableSubmitButton,updateSelectOptions}from"../../../../../core/utils/dom/elements.min.js";import{trimCycleRange}from"../../../../../core/utils/dom/forms/trimCycleConfigurations.min.js";import{safeDisplayMessage}from"../../../../../core/utils/dom/messages.min.js";export default async function handleEditHorseFormSubmission({evt:e,cID:s,primaryKey:r,horseContainer:t,manageClient:a,componentId:o}){try{if("delete"===e.submitter.name)return void await deleteClientHorse({evt:e,manageClient:a,cID:s,primaryKey:r,horseContainer:t,componentId:o});const i=Object.fromEntries(new FormData(e.target)),n=await validateEditHorseForm(i);if(n.length>0){const{default:e}=await import("../../../../../core/utils/dom/forms/displayFormValidationErrors.min.js");return e(n,{formMessage:"Please fix the following errors",scrollToTope:!0}),void disableEnableSubmitButton("submit-button")}if(await a.editClientHorse({cID:s,userData:i})){safeDisplayMessage({elementId:"form-msg",message:`${i.horse_name} has been successfully updated.`,isSuccess:!0});const e=await a.getClientHorses({primaryKey:r});document.getElementById("horse-list");return updateSelectOptions("horse-list",e,{valueMapper:e=>e.hID,textMapper:e=>e.horse_name,datasetMapper:e=>({"data-service-type":e.service_type,"data-trim-cycle":e.trim_cycle})}),void(t.innerHTML="")}safeDisplayMessage({elementId:"form-msg",message:"An error occurred while updating the horse. Please try again."})}catch(e){const{AppError:s}=await import("../../../../../core/errors/models/AppError.min.js");s.handleError(e,{errorCode:s.Types.FORM_SUBMISSION_ERROR,userMessage:s.BaseMessages.forms.submissionFailed,displayTarget:"form-msg"})}}async function deleteClientHorse({evt:e,manageClient:s,cID:r,primaryKey:t,horseContainer:a,componentId:o}){try{if(!confirm("Are you sure you want to delete this horse?"))return;const o=Object.fromEntries(new FormData(e.target));if(!await s.deleteClientHorse({hID:o.hID,cID:r}))return void safeDisplayMessage({elementId:"form-msg",message:`An error occurred while trying to delete ${o.horse_name}. Please try again.`});const i=await s.getClientHorses({primaryKey:t});updateSelectOptions("horse-list",i,{valueMapper:e=>e.hID,textMapper:e=>e.horse_name,datasetMapper:e=>({"data-service-type":e.type_service,"data-trim-cycle":e.trim_cycle})}),a.innerHTML="",safeDisplayMessage({elementId:"form-msg",message:`${o.horse_name} has been successfully deleted.`,isSuccess:!0})}catch(e){const{AppError:s}=await import("../../../../../core/errors/models/AppError.min.js");s.process(e,{errorCode:s.Types.FORM_SUBMISSION_ERROR,userMessage:s.BaseMessages.forms.submissionFailed,displayTarget:"form-msg"},!0)}}async function validateEditHorseForm(e){try{const s=[];return[{field:"horse_name",isValid:e=>""!==e,message:"Horse name cannot be empty."},{field:"horse_type",isValid:e=>"null"!==e,message:"Please select a horse type."},{field:"trim_cycle",isValid:e=>trimCycleRange.includes(parseInt(e,10)),message:"Please select a trim cycle."}].forEach((r=>{r.isValid(e[r.field])||s.push({input:r.field,msg:r.message})})),s}catch(e){const{AppError:s}=await import("../../../../../core/errors/models/AppError.min.js");s.process(e,{errorCode:s.Types.FORM_VALIDATION_ERROR,userMessage:s.BaseMessages.forms.validationFailed},!0)}}