// @ts-nocheck
import{getValidElement}from"../../../../../core/utils/dom/elements.js";import{cleanUserOutput}from"../../../../../core/utils/string/stringUtils.js";const COMPONENT="Delete Duplicate Client",DEBUG=!1,debugLog=(...e)=>{false};export default async function deleteTheDuplicate({evt:e,duplicateClients:t,manageClient:r,manageUser:i,index:n}){try{if(!confirm("Are you sure you want to remove this client?"))return;const i=parseInt(e.target.dataset.primarykey),n=parseInt(e.target.dataset.cid),o=`client-section-${e.target.id.split("-").pop()}`;debugLog();if(await r.deleteDuplicateClient(i)){const e=t.filter((e=>(debugLog(e.primaryKey),e.primaryKey!==i)));debugLog(),t.length=0,t.push(...e);const r=processDuplicateClientList(e);debugLog(),await clearFormOrRemoveRow({newDuplicateClientList:r,cID:n,primaryKey:i,clientRowId:o})}}catch(e){const{AppError:t}=await import("../../../../../core/errors/models/AppError.js");t.handleError(e,{errorCode:t.Types.FORM_SUBMISSION_ERROR,userMessage:"An error occurred while deleting the duplicate client.",displayTarget:"form-msg"})}}function processDuplicateClientList(e){const t=new Map;return e.forEach((e=>{const{cID:r}=e;t.set(r,(t.get(r)||0)+1)})),e.filter((e=>t.get(e.cID)>1))}async function clearFormOrRemoveRow({newDuplicateClientList:e,cID:t,primaryKey:r,clientRowId:i}){debugLog();const n=e.some((e=>e.cID===t)),o=getValidElement("client-list");if(!n){return getValidElement("client-container").innerHTML="",void await updateClientListSelect({clientList:e,selectElement:o})}getValidElement(i).remove(),await updateClientListSelect({clientList:e,selectElement:o})}async function updateClientListSelect({clientList:e,selectElement:t}){try{debugLog();const r=e.reduce(((e,t)=>(e[t.cID]=(e[t.cID]||0)+1,e)),{});debugLog();const i=Array.from(new Set(e.map((e=>e.cID)))).map((t=>({...e.find((e=>e.cID===t)),duplicateCount:r[t]})));debugLog(),t.options.length=1,i.forEach((e=>{const r=new Option(`${cleanUserOutput(e?.client_name)}${e?.duplicateCount?` (${e?.duplicateCount} duplicates)`:""}`,e.cID);t.add(r)}))}catch(e){const{AppError:t}=await import("../../../../../core/errors/models/AppError.js");t.handleError(e,{errorCode:t.Types.RENDER_ERROR,userMessage:"An error occurred while updating the client list."})}}