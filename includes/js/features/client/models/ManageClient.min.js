// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManageClient{#e;#r=null;#t=!1;#s=null;constructor(){this.#e=new IndexedDBOperations}async#i(){if(!this.#t)try{const e=await this.#e.openDBPromise();this.#r=await this.#e.getAllStorePromise(e,this.#e.stores.CLIENTLIST),this.#t=!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.INITIALIZATION_ERROR,userMessage:"Client data initialization failed"},!0)}}async getClientInfo({primaryKey:e}){return await this.#i(),this.#r.find((r=>r.primaryKey===parseInt(e,10)))}async getAllDuplicateClients(){try{const e=await this.#e.openDBPromise(),r=await this.#e.getAllStorePromise(e,this.#e.stores.CLIENTLIST);return this.#o(r)}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");return r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:"Unable to retrieve duplicate clients"},!0),[]}}#o(e){const r=Object.entries(e.reduce(((e,r)=>(e[r.cID]=(e[r.cID]||0)+1,e)),{})).filter((([e,r])=>r>1)).map((([e])=>parseInt(e,10)));return e.filter((e=>r.includes(e.cID)))}async addNewClient(e){try{if(!e)throw new Error("No user data provided.");const[r,t]=await Promise.all([this.#e.getLastKeyForID(this.#e.stores.MAXCLIENTID),this.#e.getLastKeyForID(this.#e.stores.MAXCLIENTPRIMARYKEY)]);e.cID=r,e.primaryKey=t;const s={...e,add_newClient:!0},i=await this.#e.openDBPromise(),o=i.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.ADDCLIENT,this.#e.stores.MAXCLIENTID,this.#e.stores.MAXCLIENTPRIMARYKEY],"readwrite");return await Promise.all([this.#e.addStorePromise(i,e,this.#e.stores.CLIENTLIST,!1,o),this.#e.putStorePromise(i,s,this.#e.stores.ADDCLIENT,!1,o),this.#e.putStorePromise(i,{cID:r},this.#e.stores.MAXCLIENTID,!0,o),this.#e.putStorePromise(i,{primaryKey:t},this.#e.stores.MAXCLIENTPRIMARYKEY,!0,o)]),!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async editClient(e,r,t){try{if(!r||!t)throw new Error("No cID or primaryKey provided.");const s=await this.#e.openDBPromise(),i=s.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.EDITCLIENT],"readwrite"),o=await this.#e.getAllStoreByIndexPromise(s,this.#e.stores.CLIENTLIST,"cID",r,i);return await Promise.all([...o.map((d=>{const n={...e,horses:o[0].horses||[],cID:r,primaryKey:t};return d.primaryKey!==t&&Object.assign(n,{trim_cycle:d.trim_cycle,trim_date:d.trim_date,app_time:d.app_time,primaryKey:d.primaryKey}),this.#e.putStorePromise(s,n,this.#e.stores.CLIENTLIST,!1,i)})),this.#e.putStorePromise(s,{...e,edit_client:!0,cID:r,primaryKey:t},this.#e.stores.EDITCLIENT,!1,i)]),!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async deleteClient(e,r){try{if(!r||!e)throw new Error("No primary key or cID provided.");r=parseInt(r,10);const t=await this.#e.openDBPromise(),s=t.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.DELETECLIENT],"readwrite"),i=await this.#e.getAllStoreByIndexPromise(t,this.#e.stores.CLIENTLIST,"cID",e,s),o=i[0]?.client_name,d=i.map((e=>{this.#e.deleteRecordPromise(e.primaryKey,this.#e.stores.CLIENTLIST,s),this.#e.deleteRecordPromise(e.cID,this.#e.stores.TRIMMING,s)})),n={delete_client:!0,client_name:o,cID:e};return d.push(this.#e.putStorePromise(t,n,this.#e.stores.DELETECLIENT,!1,s)),await Promise.all(d),{status:!0,msg:"Client has been removed.",type:"delete-client"}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async addDuplicateClient(e){try{const{app_time:r,duplicate_client:t,next_trim_date:s,trim_cycle:i}=e,o=await this.#e.getLastKeyForID(this.#e.stores.MAXCLIENTPRIMARYKEY),d=await this.#e.openDBPromise(),n=d.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.ADDDUPLICATECLIENT,this.#e.stores.MAXCLIENTPRIMARYKEY],"readwrite"),a=[],p=await this.#e.getStorePromise(d,this.#e.stores.CLIENTLIST,parseInt(t,10),n),c={...p,primaryKey:o,app_time:r,trim_date:s,trim_cycle:i};return a.push(this.#e.addStorePromise(d,c,this.#e.stores.CLIENTLIST,!1,n)),c.add_duplicateClient=!0,a.push(this.#e.putStorePromise(d,c,this.#e.stores.ADDDUPLICATECLIENT,!1,n)),a.push(this.#e.putStorePromise(d,{primaryKey:o},this.#e.stores.MAXCLIENTPRIMARYKEY,!0,n)),await Promise.all(a),{status:"success",msg:`${p.client_name} has been duplicated successfully.`}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async deleteDuplicateClient(e){try{if(!primaryKey)throw new Error("No primary key provided.");e.primaryKey=parseInt(primaryKey,10);const r=await this.#e.openDBPromise(),t=r.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.DELETEDUPLICATECLIENT],"readwrite"),s={...e},i=[];return i.push(this.#e.deleteRecordPromise(e.primaryKey,this.#e.stores.CLIENTLIST,t)),i.push(this.#e.putStorePromise(r,s,this.#e.stores.DELETEDUPLICATECLIENT,!1,t)),await Promise.all(i),{status:!0,msg:"Duplicate client has been removed."}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientHorses({primaryKey:e}){try{if(!e)throw new Error("No primaryKey provided.");const r=await this.getClientInfo({primaryKey:e});return r?.horses||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async addNewHorse({horseName:e,cID:r,primaryKey:t}){try{if(!r||!t)throw new Error("No cID or primaryKey provided.");const s=await this.#e.getLastKeyForID(this.#e.stores.MAXHORSEID),i=await this.#e.openDBPromise(),o=i.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.ADDHORSE,this.#e.stores.MAXHORSEID],"readwrite");console.log("In addNewHorse: cID: ",typeof r),console.log("In addNewHorse: primaryKey: ",typeof t);const d=await this.#e.getAllStoreByIndexPromise(i,this.#e.stores.CLIENTLIST,"cID",r,o);console.log("In addNewHorse, clientInfo:",d);const n=d[0]?.horses||[],a=(d[0],{hID:s,horse_name:e});return n.push(a),await Promise.all([d.flatMap((e=>this.#e.putStorePromise(i,{...e,horses:n},this.#e.stores.CLIENTLIST,!1,o))),this.#e.putStorePromise(i,{add_newHorse:!0,horse_name:e,cID:r,hID:s},this.#e.stores.ADDHORSE,!1,o),this.#e.putStorePromise(i,{hID:s},this.#e.stores.MAXHORSEID,!0,o)]),this.#r=null,this.#t=!1,!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async editClientHorse(e,r,t){try{if(!e||!r)throw new Error("No horse id or client id provided.");"string"==typeof e&&(e=Number(e));const s=await this.#e.openDBPromise(),i=s.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.EDITHORSE],"readwrite"),o=await this.#e.getAllStoreByIndexPromise(s,this.#e.stores.CLIENTLIST,"cID",r,i),d=o[0]?.client_name,n=[];for(const r of o){const o=r.horses.map((r=>r.hID===Number(e)?{...r,horse_name:t}:r)),d={...r,horses:o};n.push(this.#e.putStorePromise(s,d,this.#e.stores.CLIENTLIST,!1,i))}const a={hID:e,cID:r,horse_name:t,edit_clientHorse:!0,client_name:d};return n.push(this.#e.putStorePromise(s,a,this.#e.stores.EDITHORSE,!1,i)),await Promise.all(n),{status:!0,msg:`${t} has been updated.`}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async deleteClientHorse(e,r){try{if(!e||!r)throw new Error("No horse id or client id provided.");"string"==typeof e&&(e=Number(e)),"string"==typeof r&&(r=Number(r));const t=await this.#e.openDBPromise(),s=t.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.DELETEHORSE],"readwrite"),i=await this.#e.getAllStoreByIndexPromise(t,this.#e.stores.CLIENTLIST,"cID",r,s),o=i[0]?.client_name,d=[];for(const r of i){const i=r.horses.filter((r=>r.hID!==Number(e))),o={...r,horses:i};d.push(this.#e.putStorePromise(t,o,this.#e.stores.CLIENTLIST,!1,s))}const n={hID:e,cID:r,delete_clientHorse:!0,client_name:o};return d.push(this.#e.putStorePromise(t,n,this.#e.stores.DELETEHORSE,!1,s)),await Promise.all(d),s.oncomplete=()=>{console.log("Transaction completed successfully.")},s.onerror=e=>{throw console.error("Transaction failed:",e),new Error("Transaction failed: "+e.target.error)},{status:!0,msg:"Horse has been deleted."}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientScheduleList(){try{const e=await this.#e.openDBPromise();return await this.#e.getAllStorePromise(e,this.#e.stores.CLIENTLIST)||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientScheduleByTrimDate(e){try{const r=await this.#e.openDBPromise();return await this.#e.getAllStoreByIndexPromise(r,this.#e.stores.CLIENTLIST,"trim_date",e)||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getAllClientsTrimmingInfo(){try{const e=await this.#e.openDBPromise(),r=await this.#e.getAllStorePromise(e,this.#e.stores.TRIMMING);return r?.trimmings||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientTrimmingInfo(e){try{const r=await this.#e.openDBPromise(),t=await this.#e.getStorePromise(r,this.#e.stores.TRIMMING,e);return t?.trimmings||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");return r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null}),[]}}async updateClientSchedule(e){try{const{next_trim_date:r,app_time:t,...s}=e,i=await this.#e.openDBPromise(),o=i.transaction([this.#e.stores.CLIENTLIST,this.#e.stores.EDITCLIENT],"readwrite"),d=[],n={...await this.#e.getStorePromise(i,this.#e.stores.CLIENTLIST,e.primaryKey,o),app_time:t,trim_date:r};return d.push(this.#e.putStorePromise(i,n,this.#e.stores.CLIENTLIST,!1,o)),n.edit_client=!0,d.push(this.#e.putStorePromise(i,n,this.#e.stores.EDITCLIENT,!1,o)),await Promise.all(d),{status:!0,msg:"Client schedule updated successfully."}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async updateClientData(e){try{return await this.#d(e),this.#r=null,this.#t=!1,!0}catch(e){const{AppError:r}=await import("../../core/errors/models/AppError.js");throw new r("Failed to update client data",{originalError:e,errorCode:r.Types.DATABASE_ERROR,userMessage:null,shouldLog:!0})}}async#d(e){const r=await this.#e.openDBPromise(),t=r.transaction([this.#e.stores.CLIENTLIST],"readwrite");return await this.#e.putStorePromise(r,e,this.#e.stores.CLIENTLIST,!1,t),!0}}