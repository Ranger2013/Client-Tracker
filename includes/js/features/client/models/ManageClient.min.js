// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManageClient{static#e=null;#r;#t=null;#s=!1;#i=null;#o=!1;constructor(e={debug:!1}){return ManageClient.#e?(void 0!==e.debug&&ManageClient.#e.setDebugMode(e.debug),ManageClient.#e):(this.#r=new IndexedDBOperations,this.#o=e.debug||!1,ManageClient.#e=this,this.#n("ManageClient singleton instance created."),this)}setDebugMode(e){this.#o=!!e}#n(...e){this.#o&&console.log("[ManageClient]",...e)}async#d(){if(!this.#s)try{const e=await this.#r.openDBPromise();this.#t=await this.#r.getAllStorePromise(e,this.#r.stores.CLIENTLIST),this.#s=!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.INITIALIZATION_ERROR,userMessage:"Client data initialization failed"},!0)}}async getClientInfo({primaryKey:e}){return await this.#d(),this.#t.find((r=>r.primaryKey===parseInt(e,10)))}async getAllDuplicateClients(){try{const e=await this.#r.openDBPromise(),r=await this.#r.getAllStorePromise(e,this.#r.stores.CLIENTLIST);return this.#a(r)}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");return r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:"Unable to retrieve duplicate clients"},!0),[]}}#a(e){const r=Object.entries(e.reduce(((e,r)=>(e[r.cID]=(e[r.cID]||0)+1,e)),{})).filter((([e,r])=>r>1)).map((([e])=>parseInt(e,10)));return e.filter((e=>r.includes(e.cID)))}async addNewClient(e){try{if(this.#n("Adding new client: userData: ",e),!e)throw new Error("No user data provided.");const[r,t]=await Promise.all([this.#r.getLastKeyForID({store:this.#r.stores.MAXCLIENTID}),this.#r.getLastKeyForID({store:this.#r.stores.MAXCLIENTPRIMARYKEY})]);this.#n("New cID: ",r),this.#n("New Primary Key: ",t),e.cID=r,e.primaryKey=t;const s={...e,add_newClient:!0},i=await this.#r.openDBPromise(),o=i.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.ADDCLIENT,this.#r.stores.MAXCLIENTID,this.#r.stores.MAXCLIENTPRIMARYKEY],"readwrite");return await Promise.all([this.#r.addStorePromise(i,e,this.#r.stores.CLIENTLIST,!1,o),this.#r.putStorePromise(i,s,this.#r.stores.ADDCLIENT,!1,o),this.#r.putStorePromise(i,{cID:r},this.#r.stores.MAXCLIENTID,!0,o),this.#r.putStorePromise(i,{primaryKey:t},this.#r.stores.MAXCLIENTPRIMARYKEY,!0,o)]),!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async editClient(e,r,t){try{if(!r||!t)throw new Error("No cID or primaryKey provided.");const s=await this.#r.openDBPromise(),i=s.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.EDITCLIENT],"readwrite"),o=await this.#r.getAllStoreByIndexPromise(s,this.#r.stores.CLIENTLIST,"cID",r,i);return await Promise.all([...o.map((n=>{const d={...e,horses:o[0].horses||[],cID:parseInt(r,10),primaryKey:parseInt(t,10)};return this.#n("NewClientData: ",d),parseInt(n.primaryKey,10)!==parseInt(t,10)&&Object.assign(d,{trim_cycle:n.trim_cycle,trim_date:n.trim_date,app_time:n.app_time,primaryKey:parseInt(n.primaryKey,10)}),this.#r.putStorePromise(s,d,this.#r.stores.CLIENTLIST,!1,i)})),this.#r.putStorePromise(s,{...e,edit_client:!0,cID:r,primaryKey:t},this.#r.stores.EDITCLIENT,!1,i)]),this.#t=null,this.#s=!1,!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async deleteClient(e,r){try{if(!r||!e)throw new Error("No primary key or cID provided.");r=parseInt(r,10);const t=await this.#r.openDBPromise(),s=t.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.DELETECLIENT],"readwrite"),i=await this.#r.getAllStoreByIndexPromise(t,this.#r.stores.CLIENTLIST,"cID",e,s),o=i[0]?.client_name,n=i.map((e=>{this.#r.deleteRecordPromise(e.primaryKey,this.#r.stores.CLIENTLIST,s),this.#r.deleteRecordPromise(e.cID,this.#r.stores.TRIMMING,s)})),d={delete_client:!0,client_name:o,cID:e};return n.push(this.#r.putStorePromise(t,d,this.#r.stores.DELETECLIENT,!1,s)),await Promise.all(n),{status:!0,msg:"Client has been removed.",type:"delete-client"}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async addDuplicateClient(e){try{const{app_time:r,duplicate_client:t,next_trim_date:s,trim_cycle:i}=e,o=await this.#r.getLastKeyForID({store:this.#r.stores.MAXCLIENTPRIMARYKEY}),n=await this.#r.openDBPromise(),d=n.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.ADDDUPLICATECLIENT,this.#r.stores.MAXCLIENTPRIMARYKEY],"readwrite"),a=[],p=await this.#r.getStorePromise(n,this.#r.stores.CLIENTLIST,parseInt(t,10),d),c={...p,primaryKey:o,app_time:r,trim_date:s,trim_cycle:i};return a.push(this.#r.addStorePromise(n,c,this.#r.stores.CLIENTLIST,!1,d)),c.add_duplicateClient=!0,a.push(this.#r.putStorePromise(n,c,this.#r.stores.ADDDUPLICATECLIENT,!1,d)),a.push(this.#r.putStorePromise(n,{primaryKey:o},this.#r.stores.MAXCLIENTPRIMARYKEY,!0,d)),await Promise.all(a),{status:"success",msg:`${p.client_name} has been duplicated successfully.`}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async deleteDuplicateClient(e){try{if(!primaryKey)throw new Error("No primary key provided.");e.primaryKey=parseInt(primaryKey,10);const r=await this.#r.openDBPromise(),t=r.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.DELETEDUPLICATECLIENT],"readwrite"),s={...e},i=[];return i.push(this.#r.deleteRecordPromise(e.primaryKey,this.#r.stores.CLIENTLIST,t)),i.push(this.#r.putStorePromise(r,s,this.#r.stores.DELETEDUPLICATECLIENT,!1,t)),await Promise.all(i),{status:!0,msg:"Duplicate client has been removed."}}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientHorses({primaryKey:e}){try{if(!e)throw new Error("No primaryKey provided.");const r=await this.getClientInfo({primaryKey:e});return r?.horses||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async addNewHorse({userData:e,cID:r,primaryKey:t}){try{if(!r||!t)throw new Error("No cID or primaryKey provided.");const s=await this.#r.getLastKeyForID({store:this.#r.stores.MAXHORSEID});this.#n("New Horse ID: ",s);const i=await this.#r.openDBPromise(),o=i.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.ADDHORSE,this.#r.stores.MAXHORSEID],"readwrite"),n=await this.#r.getAllStoreByIndexPromise(i,this.#r.stores.CLIENTLIST,"cID",r,o),d=n[0]?.horses||[],a={hID:s,horse_name:e.horse_name,service_type:e.service_type,trim_cycle:e.trim_cycle};return d.push(a),await Promise.all([...n.map((e=>this.#r.putStorePromise(i,{...e,horses:d},this.#r.stores.CLIENTLIST,!1,o))),this.#r.putStorePromise(i,{...a,add_newHorse:!0,cID:r},this.#r.stores.ADDHORSE,!1,o),this.#r.putStorePromise(i,{hID:s},this.#r.stores.MAXHORSEID,!0,o)]),this.#t=null,this.#s=!1,!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async editClientHorse({cID:e,userData:r}){try{const{hID:t,...s}=r;if(!t||!e)throw new Error("No horse id or client id provided.");const i=await this.#r.openDBPromise(),o=i.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.EDITHORSE],"readwrite"),n=await this.#r.getAllStoreByIndexPromise(i,this.#r.stores.CLIENTLIST,"cID",e,o);n[0];return await Promise.all([...n.map((e=>{const r=e.horses.map((e=>e.hID===parseInt(t,10)?{...e,hID:parseInt(t,10),...s}:e));return this.#r.putStorePromise(i,{...e,horses:r},this.#r.stores.CLIENTLIST,!1,o)})),this.#r.putStorePromise(i,{edit_clientHorse:!0,hID:t,...s},this.#r.stores.EDITHORSE,!1,o)]),this.#t=null,this.#s=!1,!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async deleteClientHorse({hID:e,cID:r}){try{if(!e||!r)throw new Error("No horse id or client id provided.");"string"==typeof e&&(e=Number(e)),"string"==typeof r&&(r=Number(r));const t=await this.#r.openDBPromise(),s=t.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.DELETEHORSE],"readwrite"),i=await this.#r.getAllStoreByIndexPromise(t,this.#r.stores.CLIENTLIST,"cID",r,s),o=i[0]?.client_name,n=[];for(const r of i){const i=r.horses.filter((r=>r.hID!==Number(e))),o={...r,horses:i};n.push(this.#r.putStorePromise(t,o,this.#r.stores.CLIENTLIST,!1,s))}const d={hID:e,cID:r,delete_clientHorse:!0,client_name:o};return n.push(this.#r.putStorePromise(t,d,this.#r.stores.DELETEHORSE,!1,s)),await Promise.all(n),s.onerror=e=>{throw console.error("Transaction failed:",e),new Error("Transaction failed: "+e.target.error)},this.#t=null,this.#s=!1,!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientScheduleList(){try{const e=await this.#r.openDBPromise();return await this.#r.getAllStorePromise(e,this.#r.stores.CLIENTLIST)||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientScheduleByTrimDate(e){try{this.#n("In getClientScheduleByTrimDate: trimDate: ",e);const r=await this.#r.openDBPromise(),t=await this.#r.getAllStoreByIndexPromise(r,this.#r.stores.CLIENTLIST,"trim_date",e);return this.#n("In getClientScheduleByTrimDate: clientList: ",t),t||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getAllClientsTrimmingInfo(){try{const e=await this.#r.openDBPromise(),r=await this.#r.getAllStorePromise(e,this.#r.stores.TRIMMING);return r?.trimmings||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null},!0)}}async getClientTrimmingInfo(e){try{e="string"==typeof e?parseInt(e,10):e;const r=await this.#r.openDBPromise(),t=await this.#r.getStorePromise(r,this.#r.stores.TRIMMING,e);return t?.trimmings||[]}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");return r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:null}),[]}}async updateClientSchedule({cID:e,primaryKey:r,userData:t}){try{if(console.log("cID: ",e),console.log("primaryKey: ",r),!e||!r||!t)throw new Error("No cID, primaryKey, or userData provided.");const{next_trim_date:s,app_time:i,...o}=t,n=await this.#r.openDBPromise(),d=n.transaction([this.#r.stores.CLIENTLIST,this.#r.stores.EDITCLIENT],"readwrite"),a={...await this.#r.getStorePromise(n,this.#r.stores.CLIENTLIST,parseInt(r,10),d),app_time:i,trim_date:s};return await Promise.all([this.#r.putStorePromise(n,a,this.#r.stores.CLIENTLIST,!1,d),this.#r.putStorePromise(n,{...a,edit_client:!0,cID:parseInt(e,10),primaryKey:parseInt(r,10)},this.#r.stores.EDITCLIENT,!1,d)]),this.#t=null,this.#s=!1,!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");return r.handleError(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:"We had an issue updating the client's new schedule. Update their schedule through the edit client and please report this issue."},!0),!1}}async updateClientData(e){try{return await this.#p(e),this.#t=null,this.#s=!1,!0}catch(e){const{AppError:r}=await import("../../core/errors/models/AppError.js");throw new r("Failed to update client data",{originalError:e,errorCode:r.Types.DATABASE_ERROR,userMessage:null,shouldLog:!0})}}async#p(e){const r=await this.#r.openDBPromise(),t=r.transaction([this.#r.stores.CLIENTLIST],"readwrite");return await this.#r.putStorePromise(r,e,this.#r.stores.CLIENTLIST,!1,t),!0}}