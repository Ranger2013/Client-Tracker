// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";import ManageClient from"./ManageClient.js";export default class ManageTrimming{static#e=null;#t;#r;#i=!1;constructor(e={debug:!0}){return ManageTrimming.#e?(void 0!==e.debug&&ManageTrimming.#e.setDebugMode(e.debug),ManageTrimming.#e):(this.#t=new IndexedDBOperations,this.#r=new ManageClient,this.#i=e.debug||!1,ManageTrimming.#e=this,this.#s("ManageTrimming singleton instance created"),this)}setDebugMode(e){this.#i=!!e}#s(...e){this.#i&&console.log("[ManageTrimming]",...e)}async handleAddTrimmingSession({cID:e,userData:t}){try{if(!t||!e)throw new Error("Missing required data for trimming session");"string"==typeof e&&(e=parseInt(e,10));const[r,i]=await Promise.all([this.#r.getClientTrimmingInfo(e),this.#t.getLastKeyForID({store:this.#t.stores.MAXTRIMID})]);this.#s("Previous trims:",r),this.#s("Next trim ID:",i);const s=this.setTrimmingDataStructureForBackupData({cID:e,userData:t,trimID:i});this.#s("Backup Data Structure: ",s);const a=await this.setTrimmingStoreData({cID:e,prevTrims:r});this.#s("Trimming Store Data: ",a),s.horses=await this.extractHorseData(t),this.#s("Extracted Horse Data: ",s.horses);const[n,o]=await Promise.all([this.addTrimSession(s,a),this.handleSendingReceipt(t,s)]);if("error"===n.status)throw new Error(n.msg);return s.userData=t,{...n,...o}}catch(e){const{AppError:t}=await import("../../../core/errors/models/AppError.js");await t.process(e,{errorCode:t.Types.PROCESSING_ERROR,userMessage:"Failed to add trimming session"},!0)}}setTrimmingDataStructureForBackupData({cID:e,userData:t,trimID:r}){return{add_trimming:!0,trimID:r,cID:e,mileage_cost:t?.mileage_cost||"0",receipt:t?.receipt||"no",session_notes:t.session_notes,payment_amount:""!==t.payment?t.payment:"0",date_trimmed:t.trim_date,paid:t?.paid||"no",invoice_sent:"no"}}async setTrimmingStoreData({cID:e,prevTrims:t}){return{cID:e,trimmings:t}}async handleSendingReceipt(e,t){try{if(void 0===e?.receipt)return{receipt_status:"no-receipt",receipt_msg:""};const[{getValidationToken:r},{dataAPI:i}]=await Promise.all([import("../../../tracker.js"),import("../../../core/network/api/apiEndpoints.js")]),s=r(),a=await fetchData({api:i.receipt,data:e,token:s});if("auth-error"===serverResponse.status)return void await noAuthorizationPage();if("ok"===a.status)return t.receipt_sent="yes",{receipt_status:"receipt-sent",receipt_msg:"<div>Receipt sent.</div>"};if("error"===a.status){t.app_time=e.app_time,t.receipt_sent="no";const{helpDeskTicket:r}=await import("../utils/error-messages/errorMessages.js");return{receipt_status:"no-receipt-sent",receipt_msg:`<div class="w3-text-red">Server Error: Problem on the server prevented the receipt from being sent.</div><div class="w3-text-red">The receipt should auto-send when you back up your data. If it does not, then ${r}</div>`}}return t.app_time=e.app_time,t.receipt_sent="no",{receipt_status:"unknown-error",receipt_msg:'<div class="w3-text-red">Unknown error.</div><div class="w3-text-red">The system will try again when you backup your data.</div>'}}catch(e){const{handleError:r}=await import("../utils/error-messages/handleError.js");return await r("handleSendingReceiptError","Handle sending receipt error: ",e),t.receipt_sent="no",{receipt_status:"no-receipt-sent",receipt_msg:'<div class="w3-text-red">Receipt not sent due to being offline.</div><div class="w3-text-red">The system will retry when you back up your data.</div>'}}}async extractHorseData({number_horses:e,...t}){try{return Object.entries(t).reduce(((e,[r,i])=>{const s=r.match(/^horse_list_(\d+)$/);if(!s)return e;const a=s[1],[n,o]=i.split(":"),d=e.find((e=>e.index===a))||{index:a,hID:Number(n),horse_name:o,type_trim:t[`service_cost_${a}`],acc:t[`accessories_${a}`]||[]};return[...e.filter((e=>e.index!==a)),d]}),[]).sort(((e,t)=>Number(e.index)-Number(t.index))).map((({index:e,...t})=>t))}catch(e){const{AppError:t}=await import("../../../core/errors/models/AppError.js");return await t.process(e,{errorCode:t.Types.PROCESSING_ERROR,userMessage:"Failed to process horse data",context:{component:"ManageTrimming",action:"extractHorseData"}},!0),[]}}async addTrimSession(e,t){try{const r={...e};this.#s("Add Trim Session: Backup Trimming Data Structure: ",e),this.#s("Add Trim Session: backupData: ",r),this.#s("Add Trim Session: trimmingStoreData: ",t);(await this.#t.openDBPromise()).transaction([this.#t.stores.MAXTRIMID,this.#t.stores.ADDTRIMMING,this.#t.stores.TRIMMING],"readwrite"),e.cID;return delete r.cID,delete r.add_trimming,delete r.userData,t.trimmings.push(r),this.#s("Add Trim Session: trimmingStoreData after backupData push: ",t),{status:"success",msg:"Trimming/Shoeing has been added successfully."}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js"),{helpDeskTicket:r}=await import("../utils/error-messages/errorMessages.js");return await t("addTrimSessionError","Add trimming session error: ",e),{status:"error",msg:`Unable to add trimming session at this time.<br>${r}`}}}async cleanupTrimmings(e){try{const t=await this.#r.getClientTrimmingInfo(Number(e));if(t&&t.length>9){t.shift();const r=await this.setTrimmingStoreData({cID:e,prevTrims:t}),i=await this.#t.openDBPromise();this.#t.putStorePromise(i,r,this.#t.stores.TRIMMING)}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js");await t("cleanupTrimmingsError","Cleanup trimmings error: ",e)}}}