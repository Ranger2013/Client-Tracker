// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManageUser{#t=null;#e=!1;#s;constructor(){this.#s=new IndexedDBOperations}async#r(){if(!this.#e)try{const t=await this.#s.openDBPromise(),e=await this.#s.getAllStorePromise(t,this.#s.stores.USERSETTINGS);this.#t=1===e?.length?e[0]:null,this.#e=!0}catch(t){console.log("In ManageUser #initializeSettings error: ",t);const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.INITIALIZATION_ERROR,userMessage:e.BaseMessages.system.generic,shouldLog:!0},!0)}}async getSettings(...t){try{return await this.#r(),this.#t?0===t.length?this.#t:t.filter((t=>null!=this.#t[t])).reduce(((t,e)=>({...t,[e]:this.#t[e]})),{}):null}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.SETTINGS_ERROR,userMessage:e.BaseMessages.system.server,shouldLog:!0},!0)}}async getDateTimeOptions(){try{const{date_time:t}=await this.getSettings("date_time")??{};return t??null}catch(t){throw t}}async getMileageCharges(){try{const{mileage_charges:t}=await this.getSettings("mileage_charges")??{},{per_mile:e,range:s}=t??{};return null!=e?.cost_per_mile&&null!=e?.starting_mile?e:s?.length>0?s:null}catch(t){throw t}}async getFarrierPrices(){try{const{farrier_prices:t}=await this.getSettings("farrier_prices")??{};return t??null}catch(t){throw t}}async getScheduleOptions(){try{const{schedule_options:t}=await this.getSettings("schedule_options")??{};return t??null}catch(t){throw t}}async getColorOptions(){try{const{color_options:t}=await this.getSettings("color_options")??{};return t??null}catch(t){throw t}}async getUserBlockedDates(){try{const{blocked_dates:t}=await this.getSettings("blocked_dates")??{};return t??null}catch(t){throw t}}async getUserPersonalNotes(){try{const t=await this.#s.openDBPromise();return await this.#s.getAllStorePromise(t,this.#s.stores.PERSONALNOTES)??null}catch(t){throw t}}async updateLocalUserSettings({userData:t,settingsProperty:e,backupStore:s=null,backupAPITag:r=null,backupData:a=null}){try{const i=await this.#a({userData:t,settingsProperty:e,backupStore:s,backupAPITag:r,backupData:a});return i&&(this.#t=null,this.#e=!1),i}catch(t){throw t}}async#a({userData:t,settingsProperty:e,backupStore:s=null,backupAPITag:r=null,backupData:a=null}){try{let i=await this.getSettings();if(!i){const{default:t}=await import("../components/userSettingsDataStructure.js"),e=t(),s=await this.#s.openDBPromise();await this.#s.putStorePromise(s,e,this.#s.stores.USERSETTINGS),i=e,this.#t=null,this.#e=!1}return i[e]=t,await this.#i({userData:t,userSettings:i,backupStore:s,backupAPITag:r,backupData:a}),!0}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.DATABASE_ERROR,userMessage:e.BaseMessages.system.server,shouldLog:!0},!0)}}async#i({userData:t,userSettings:e,backupStore:s=null,backupAPITag:r=null,backupData:a=null}){try{const i=await this.#s.openDBPromise(),[n,o]=await Promise.all([this.#s.clearStorePromise(i,this.#s.stores.USERSETTINGS),this.#s.putStorePromise(i,e,this.#s.stores.USERSETTINGS)]);return s&&r&&await this.#n(t,s,r,a),!0}catch(t){throw t}}async#n(t,e,s,r){try{const a=await this.#s.openDBPromise(),i=r??{...t,[s]:!0};await this.#s.putStorePromise(a,i,e,!0)}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.BACKUP_ERROR,userMessage:e.BaseMessages.system.backupError,shouldLog:!0},!0)}}getStoreNames(){return this.#s.stores}async checkStoresForData(t){try{const e=await this.#s.openDBPromise();for(let s in t){const r=await this.#s.getAllStorePromise(e,t[s]);if(r&&r.length>0)return!0}return!1}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return await e.handleError(t,{errorCode:e.Types.DATABASE_ERROR,userMessage:e.BaseMessages.system.databaseError,shouldLog:!0}),!1}}}