// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManageUser{static#t=null;#e=null;#s=!1;#i;#r=!1;constructor(t={debug:!1}){return ManageUser.#t?(void 0!==t.debug&&ManageUser.#t.setDebugMode(t.debug),ManageUser.#t):(this.#i=new IndexedDBOperations,this.#r=t.debug||!1,ManageUser.#t=this,this.#a("ManageUser singleton instance created."),this)}setDebugMode(t){this.#r=!!t}#a(...t){this.#r&&console.log("[ManageUser]",...t)}async#n(){if(this.#a("Is this.#initialized: ",this.#s),!this.#s)try{const t=await this.#i.openDBPromise(),e=await this.#i.getAllStorePromise(t,this.#i.stores.USERSETTINGS);this.#a("In #initializeSettings: userSettings: ",e),this.#e=1===e?.length?e[0]:null,this.#s=!0,this.#a("In #initializeSettings: #settings set: ",this.#e)}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.INITIALIZATION_ERROR,userMessage:e.BaseMessages.system.generic,shouldLog:!0},!0)}}async getSettings(...t){try{return this.#a("In getSettings: ",t),await this.#n(),this.#a("In getSettings: ",this.#e),this.#e?0===t.length?this.#e:t.filter((t=>null!=this.#e[t])).reduce(((t,e)=>({...t,[e]:this.#e[e]})),{}):null}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.SETTINGS_ERROR,userMessage:e.BaseMessages.system.server,shouldLog:!0},!0)}}async getDateTimeOptions(){try{const{date_time:t}=await this.getSettings("date_time")??{};return t??null}catch(t){throw t}}async getMileageCharges(){try{const{mileage_charges:t}=await this.getSettings("mileage_charges")??{},{per_mile:e,range:s}=t??{};return null!=e?.cost_per_mile&&null!=e?.starting_mile?e:s?.length>0?s:null}catch(t){throw t}}async getFarrierPrices(){try{const{farrier_prices:t}=await this.getSettings("farrier_prices")??{};return t??null}catch(t){throw t}}async getScheduleOptions(){try{const{schedule_options:t}=await this.getSettings("schedule_options")??{};return t??null}catch(t){throw t}}async getColorOptions(){try{const{color_options:t}=await this.getSettings("color_options")??{};return t??null}catch(t){throw t}}async getUserBlockedDates(){try{const{blocked_dates:t}=await this.getSettings("blocked_dates")??{};return t??null}catch(t){throw t}}async getUserPersonalNotes(){try{const t=await this.#i.openDBPromise();return await this.#i.getAllStorePromise(t,this.#i.stores.PERSONALNOTES)??null}catch(t){throw t}}async updateLocalUserSettings({userData:t,settingsProperty:e,backupStore:s=null,backupAPITag:i=null,backupData:r=null}){try{const a=await this.#o({userData:t,settingsProperty:e,backupStore:s,backupAPITag:i,backupData:r});return a&&(this.#e=null,this.#s=!1),a}catch(t){throw t}}async#o({userData:t,settingsProperty:e,backupStore:s=null,backupAPITag:i=null,backupData:r=null}){try{let a=await this.getSettings();if(!a){const{default:t}=await import("../components/userSettingsDataStructure.js"),e=t(),s=await this.#i.openDBPromise();await this.#i.putStorePromise(s,e,this.#i.stores.USERSETTINGS),a=e,this.#e=null,this.#s=!1}return a[e]=t,await this.#c({userData:t,userSettings:a,backupStore:s,backupAPITag:i,backupData:r}),!0}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.DATABASE_ERROR,userMessage:e.BaseMessages.system.server,shouldLog:!0},!0)}}async#c({userData:t,userSettings:e,backupStore:s=null,backupAPITag:i=null,backupData:r=null}){try{const a=await this.#i.openDBPromise();return await this.#i.putStorePromise(a,e,this.#i.stores.USERSETTINGS,!0),s&&i&&await this.#g(t,s,i,r),!0}catch(t){throw t}}async#g(t,e,s,i){try{const r=await this.#i.openDBPromise(),a=i??{...t,[s]:!0};await this.#i.putStorePromise(r,a,e,!0)}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.BACKUP_ERROR,userMessage:e.BaseMessages.system.backupError,shouldLog:!0},!0)}}getStoreNames(){return this.#i.stores}async checkStoresForData(t){try{const e=await this.#i.openDBPromise();for(let s in t){const i=await this.#i.getAllStorePromise(e,t[s]);if(i&&i.length>0)return!0}return!1}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return await e.handleError(t,{errorCode:e.Types.DATABASE_ERROR,userMessage:e.BaseMessages.system.databaseError,shouldLog:!0}),!1}}}