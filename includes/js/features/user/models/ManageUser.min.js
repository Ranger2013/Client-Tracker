// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManageUser{#r=null;#e=!1;#t;constructor(){this.#t=new IndexedDBOperations}async#s(){if(!this.#e)try{const r=await this.#t.openDBPromise(),e=await this.#t.getAllStorePromise(r,this.#t.stores.USERSETTINGS);this.#r=1===e?.length?e[0]:null,this.#e=!0}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");throw new e("Settings initialization failed",{originalError:r,errorCode:e.Types.INITIALIZATION_ERROR,userMessage:"Unable to load your settings. Some features may be unavailable.",shouldLog:!0})}}async getSettings(...r){try{return await this.#s(),this.#r?0===r.length?this.#r:r.reduce(((r,e)=>(r[e]=this.#r[e],r)),{}):null}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return new e("Failed to retrieve settings",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,shouldLog:!0,userMessage:null}).logError(),null}}async getDateTimeOptions(){try{const{date_time:r}=await this.getSettings("date_time")??{};return r??null}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return new e("Failed to get date/time options",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,shouldLog:!0,userMessage:null}).logError(),null}}async getMileageCharges(){try{const{mileage_charges:r}=await this.getSettings("mileage_charges"),{per_mile:e,range:t}=r;return null!=e.cost_per_mile&&null!=e.starting_mile?e:t.length>0?t:null}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return new e("Failed to get mileage charges",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,shouldLog:!0,userMessage:null}).logError(),null}}async getFarrierPrices(){try{const{farrier_prices:r}=await this.getSettings("farrier_prices")??{};return r??null}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return new e("Failed to get farrier prices",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,shouldLog:!0,userMessage:null}).logError(),null}}async getScheduleOptions(){try{const{schedule_options:r}=await this.getSettings("schedule_options")??{};return r??null}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return new e("Failed to get schedule options",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,shouldLog:!0,userMessage:null}).logError(),null}}async getColorOptions(){try{const{color_options:r}=await this.getSettings("color_options")??{};return r??null}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return new e("Failed to get color options",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,shouldLog:!0,userMessage:null}).logError(),null}}async getUserBlockedDates(){try{const{blocked_dates:r}=await this.getSettings("blocked_dates")??{};return r??null}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return new e("Failed to get blocked dates",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,shouldLog:!0,userMessage:null}).logError(),null}}async updateLocalUserSettings({userData:r,settingsProperty:e,backupStore:t=null,backupAPITag:s=null,backupData:o=null}){try{const a=await this.#o({userData:r,settingsProperty:e,backupStore:t,backupAPITag:s,backupData:o});return a&&(this.#r=null,this.#e=!1),a}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");throw new e("Failed to update settings",{originalError:r,errorCode:e.Types.SETTINGS_ERROR,userMessage:"Unable to save your settings. Please try again.",shouldLog:!0})}}async#o({userData:r,settingsProperty:e,backupStore:t=null,backupAPITag:s=null,backupData:o=null}){try{let a=await this.getSettings();if(!a){const{default:r}=await import("../../../../../old-js-code/js/utils/configurations/user-settings-structure/userSettingsDataStructure.js"),e=r(),t=await this.#t.openDBPromise();await this.#t.putStorePromise(t,e,this.#t.stores.USERSETTINGS),a=e,this.#r=null,this.#e=!1}return a[e]=r,await this.#a({userData:r,userSettings:a,backupStore:t,backupAPITag:s,backupData:o}),!0}catch(r){const{AppError:e}=await import("../../../core/errors/models/AppError.js");throw new e("Settings update transaction failed",{originalError:r,errorCode:e.Types.DATABASE_ERROR,userMessage:"Unable to save settings due to a database error.",shouldLog:!0})}}async#a({userData:r,userSettings:e,backupStore:t=null,backupAPITag:s=null,backupData:o=null}){try{const a=await this.#t.openDBPromise(),[i,n]=await Promise.all([this.#t.clearStorePromise(a,this.#t.stores.USERSETTINGS),this.#t.putStorePromise(a,e,this.#t.stores.USERSETTINGS)]);return t&&s&&await this.#i(r,t,s,o),!0}catch(r){const{handleError:e}=await import("../../../../../old-js-code/js/utils/error-messages/handleError.js");throw await e({filename:"manageIDBTransactionsError",consoleMsg:"Manage IDB transactions error: ",err:r}),r}}async#i(r,e,t,s){try{const o=await this.#t.openDBPromise(),a=s??{...r,[t]:!0};await this.#t.putStorePromise(o,a,e,!0)}catch(r){const{handleError:e}=await import("../../../../../old-js-code/js/utils/error-messages/handleError.js");throw await e({filename:"backupDataError",consoleMsg:"Backup data error: ",err:r,userMsg:"Unable to backup data",errorEle:"page-msg"}),r}}getStoreNames(){return this.#t.stores}}