// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManageUser{#e=null;#r=!1;#t;constructor(){this.#t=new IndexedDBOperations}async#s(){if(!this.#r)try{const e=await this.#t.openDBPromise(),r=await this.#t.getAllStorePromise(e,this.#t.stores.USERSETTINGS);this.#e=1===r?.length?r[0]:null,this.#r=!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Settings initialization failed",{originalError:e,errorCode:r.Types.INITIALIZATION_ERROR,userMessage:"Unable to load your settings. Some features may be unavailable.",shouldLog:!0})}}async getSettings(...e){try{return await this.#s(),this.#e?0===e.length?this.#e:e.reduce(((e,r)=>(e[r]=this.#e[r],e)),{}):null}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to retrieve settings",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async getDateTimeOptions(){try{const{date_time:e}=await this.getSettings("date_time")??{};return e??null}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to get date/time options",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async getMileageCharges(){try{const{mileage_charges:e}=await this.getSettings("mileage_charges"),{per_mile:r,range:t}=e;return null!=r.cost_per_mile&&null!=r.starting_mile?r:t.length>0?t:null}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to get mileage charges",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async getFarrierPrices(){try{const{farrier_prices:e}=await this.getSettings("farrier_prices")??{};return e??null}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to get farrier prices",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async getScheduleOptions(){try{const{schedule_options:e}=await this.getSettings("schedule_options")??{};return e??null}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to get schedule options",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async getColorOptions(){try{const{color_options:e}=await this.getSettings("color_options")??{};return e??null}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to get color options",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async getUserBlockedDates(){try{const{blocked_dates:e}=await this.getSettings("blocked_dates")??{};return e??null}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to get blocked dates",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async updateLocalUserSettings({userData:e,settingsProperty:r,backupStore:t=null,backupAPITag:s=null,backupData:o=null}){try{const a=await this.#o({userData:e,settingsProperty:r,backupStore:t,backupAPITag:s,backupData:o});return a&&(this.#e=null,this.#r=!1),a}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Failed to update settings",{originalError:e,errorCode:r.Types.SETTINGS_ERROR,userMessage:null,shouldLog:!0})}}async#o({userData:e,settingsProperty:r,backupStore:t=null,backupAPITag:s=null,backupData:o=null}){try{let a=await this.getSettings();if(!a){const{default:e}=await import("../../../../../old-js-code/js/utils/configurations/user-settings-structure/userSettingsDataStructure.js"),r=e(),t=await this.#t.openDBPromise();await this.#t.putStorePromise(t,r,this.#t.stores.USERSETTINGS),a=r,this.#e=null,this.#r=!1}return a[r]=e,await this.#a({userData:e,userSettings:a,backupStore:t,backupAPITag:s,backupData:o}),!0}catch(e){const{AppError:r}=await import("../../../core/errors/models/AppError.js");throw new r("Settings update transaction failed",{originalError:e,errorCode:r.Types.DATABASE_ERROR,userMessage:"Unable to save settings due to a database error.",shouldLog:!0})}}async#a({userData:e,userSettings:r,backupStore:t=null,backupAPITag:s=null,backupData:o=null}){try{const a=await this.#t.openDBPromise(),[i,n]=await Promise.all([this.#t.clearStorePromise(a,this.#t.stores.USERSETTINGS),this.#t.putStorePromise(a,r,this.#t.stores.USERSETTINGS)]);return t&&s&&await this.#i(e,t,s,o),!0}catch(e){const{handleError:r}=await import("../../../../../old-js-code/js/utils/error-messages/handleError.js");throw await r({filename:"manageIDBTransactionsError",consoleMsg:"Manage IDB transactions error: ",err:e}),e}}async#i(e,r,t,s){try{const o=await this.#t.openDBPromise(),a=s??{...e,[t]:!0};await this.#t.putStorePromise(o,a,r,!0)}catch(e){const{handleError:r}=await import("../../../../../old-js-code/js/utils/error-messages/handleError.js");throw await r({filename:"backupDataError",consoleMsg:"Backup data error: ",err:e,userMsg:"Unable to backup data",errorEle:"page-msg"}),e}}getStoreNames(){return this.#t.stores}}