// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManageUser{static#t=null;#e=null;#s=!1;#r;#i=!1;constructor(t={debug:!1}){return ManageUser.#t?(void 0!==t.debug&&ManageUser.#t.setDebugMode(t.debug),ManageUser.#t):(this.#r=new IndexedDBOperations,this.#i=t.debug||!1,ManageUser.#t=this,this.#a("ManageUser singleton instance created."),this)}setDebugMode(t){this.#i=!!t}#a(...t){this.#i&&console.log("[ManageUser]",...t)}async#o(){if(this.#a("Is this.#initialized: ",this.#s),!this.#s)try{const t=await this.#r.openDBPromise(),e=await this.#r.getAllStorePromise(t,this.#r.stores.USERSETTINGS);this.#a("In #initializeSettings: userSettings: ",e),this.#e=1===e?.length?e[0]:null,this.#s=!0,this.#a("In #initializeSettings: #settings set: ",this.#e)}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.INITIALIZATION_ERROR,userMessage:e.BaseMessages.system.generic,shouldLog:!0},!0)}}async getSettings(...t){try{return this.#a("In getSettings: keys: ",t),await this.#o(),this.#a("In getSettings: this.#settings",this.#e),this.#e?0===t.length?this.#e:t.filter((t=>null!=this.#e[t])).reduce(((t,e)=>({...t,[e]:this.#e[e]})),{}):null}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.SETTINGS_ERROR,userMessage:e.BaseMessages.system.server,shouldLog:!0},!0)}}async getDateTimeOptions(){try{const{date_time:t}=await this.getSettings("date_time")??{};return t??null}catch(t){throw t}}async getMileageCharges(){try{const{mileage_charges:t}=await this.getSettings("mileage_charges")??{},{per_mile:e,range:s}=t??{};return null!=e?.cost_per_mile&&null!=e?.starting_mile?e:s?.length>0?s:null}catch(t){throw t}}async getFarrierPrices(){try{const{farrier_prices:t}=await this.getSettings("farrier_prices")??{};return t??null}catch(t){throw t}}async getScheduleOptions(){try{const{schedule_options:t}=await this.getSettings("schedule_options")??{};return t??null}catch(t){throw t}}async getColorOptions(){try{const{color_options:t}=await this.getSettings("color_options")??{};return t??null}catch(t){throw t}}async getUserBlockedDates(){try{const{blocked_dates:t}=await this.getSettings("blocked_dates")??{};return t??null}catch(t){throw t}}async getUserPersonalNotes(){try{const t=await this.#r.openDBPromise();return await this.#r.getAllStorePromise(t,this.#r.stores.PERSONALNOTES)??null}catch(t){throw t}}async updateLocalUserSettings({userData:t,settingsProperty:e,backupStore:s,backupAPITag:r,waitForCompletion:i=!1}){try{this.#a("UpdateLocalUserSettings: userData: ",t),this.#a("UpdateLocalUserSettings: settingsProperty: ",e),await this.#o();if(await this.#n({userData:t,settingsProperty:e,backupStore:s,backupAPITag:r,waitForCompletion:i})&&(this.#e=null,this.#s=!1,i)){await this.#o();if(!(this.#e&&this.#e[e]&&JSON.stringify(this.#e[e])===JSON.stringify(t)))throw new Error(`Failed to verify update for ${e}`)}return!0}catch(t){throw t}}async#n({userData:t,settingsProperty:e,backupStore:s,backupAPITag:r,waitForCompletion:i}){try{let a=await this.getSettings();if(this.#a("User Settings from IDB: userSettings: ",a),!a){const{default:t}=await import("../components/userSettingsDataStructure.js");a=t(),this.#a("User Settings from userSettingsDataStructure: ",a)}a[e]=t,this.#a("settingsProperty: ",e),this.#a("userSettings[settingsProperty]: ",a[e]);return await this.#g({userData:t,userSettings:a,store:this.#r.stores.USERSETTINGS,backupStore:s,backupAPITag:r,waitForCompletion:i})}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.DATABASE_ERROR,userMessage:e.BaseMessages.system.server,shouldLog:!0},!0)}}async#g({userData:t,userSettings:e,store:s,backupStore:r,backupAPITag:i,waitForCompletion:a}){try{const o=await this.#r.openDBPromise(),n=r&&i?o.transaction([s,r],"readwrite"):null;if(n){const a={[i]:!0,...t};await Promise.all([this.#r.putStorePromise(o,e,s,!0,n),this.#r.putStorePromise(o,a,r,n)])}else await this.#r.putStorePromise(o,e,s,!0);if(a){const e=await this.#r.getAllStorePromise(o,s);return e&&e[0]&&JSON.stringify(e[0])===JSON.stringify(t)}return!0}catch(t){throw t}}async#c(t,e,s,r){try{const i=await this.#r.openDBPromise(),a=r??{...t,[s]:!0};await this.#r.putStorePromise(i,a,e,!0)}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");await e.process(t,{errorCode:e.Types.BACKUP_ERROR,userMessage:e.BaseMessages.system.backupError,shouldLog:!0},!0)}}getStoreNames(){return this.#r.stores}async checkStoresForData(t){try{const e=await this.#r.openDBPromise();for(let s in t){const r=await this.#r.getAllStorePromise(e,t[s]);if(r&&r.length>0)return!0}return!1}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");return await e.handleError(t,{errorCode:e.Types.DATABASE_ERROR,userMessage:e.BaseMessages.system.databaseError,shouldLog:!0}),!1}}async buildNewUserSettingsStructure({dataStructure:t}){try{const e=await this.#r.openDBPromise(),s=await this.#r.putStorePromise(e,t,this.#r.stores.USERSETTINGS,!0);this.#a("In buildNewUserSettingsStructure: response: ",s),this.#a("New user settings structure built: ",t)}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");e.process(t,{errorCode:e.Types.AUTHORIZATION_ERROR,userMessage:e.BaseMessages.system.authorization},!0)}}async verifyPassword(t){try{const[{fetchData:e},{authAPI:s},{getValidationToken:r}]=await Promise.all([import("../../../core/network/services/network.js"),import("../../../core/network/api/apiEndpoints.js"),import("../../../tracker.js")]);return await e({api:s.verifyPass,data:{password:t},token:r()})}catch(t){const{AppError:e}=await import("../../../core/errors/models/AppError.js");e.process(t,{errorCode:e.Types.API_ERROR,userMessage:e.BaseMessages.system.server},!0)}}}