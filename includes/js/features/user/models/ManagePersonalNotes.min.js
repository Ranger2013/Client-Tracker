// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";export default class ManagePersonalNotes{static#e=null;#s;#r=!1;constructor(e={debug:!1}){return ManagePersonalNotes.#e?(void 0!==e.debug&&ManagePersonalNotes.#e.setDebugMode(e.debug),ManagePersonalNotes.#e):(this.#s=new IndexedDBOperations,this.#r=e.debug||!1,ManagePersonalNotes.#e=this,this.#t("ManagePersonalNotes singleton instance created."),this)}setDebugMode(e){this.#r=!!e}#t(...e){this.#r&&console.log("[ManagePersonalNotes]",...e)}async getAllPersonalNotes(){try{const e=await this.#s.openDBPromise(),s=await this.#s.getAllStorePromise(e,this.#s.stores.PERSONALNOTES);return this.#t("Personal notes: ",s),s}catch(e){const{AppError:s}=await import("../../../core/errors/models/AppError.js");s.process(e,{errorCode:s.Types.DATABASE_ERROR,userMessage:"There was an error retrieving your personal notes.",displayTarget:"form-msg"},!0)}}async getSpecificPersonalNotes(e){try{const s=await this.#s.openDBPromise(),r=await this.#s.getStorePromise(s,this.#s.stores.PERSONALNOTES,parseInt(e,10));return this.#t("Personal notes: ",r),r}catch(e){const{AppError:s}=await import("../../../core/errors/models/AppError.js");s.process(e,{errorCode:s.Types.DATABASE_ERROR,userMessage:"There was an error retrieving your personal notes.",displayTarget:"form-msg"},!0)}}async addPersonalNotes(e){try{const s=(new Date).toISOString().slice(0,10);this.#t("Max personal notes ID: ",this.#s.stores.MAXPERSONALNOTESID);const r=await this.#s.getLastKeyForID({store:this.#s.stores.MAXPERSONALNOTESID});this.#t("New personal notes ID: ",r);const t={date:s,notesID:r,...e};this.#t("Notes data: ",t);const o={add_personalNotes:!0,...t};this.#t("Backup data: ",o);const i=await this.#s.openDBPromise(),n=i.transaction([this.#s.stores.PERSONALNOTES,this.#s.stores.MAXPERSONALNOTESID,this.#s.stores.ADDPERSONALNOTES],"readwrite");return await Promise.all([this.#s.putStorePromise(i,t,this.#s.stores.PERSONALNOTES,!1,n),this.#s.putStorePromise(i,o,this.#s.stores.ADDPERSONALNOTES,!1,n),this.#s.putStorePromise(i,{notesID:r},this.#s.stores.MAXPERSONALNOTESID,!0,n)]),!0}catch(e){const{AppError:s}=await import("../../../core/errors/models/AppError.js");s.process(e,{errorCode:s.Types.DATABASE_ERROR,userMessage:"There was an error adding your personal notes.",displayTarget:"form-msg"},!0)}}async deletePersonalNotes(e){try{const s={delete_personalNotes:!0,notesID:parseInt(e,10)},r=await this.#s.openDBPromise(),t=r.transaction([this.#s.stores.PERSONALNOTES,this.#s.stores.DELETEPERSONALNOTES],"readwrite");return await Promise.all([this.#s.deleteRecordPromise(parseInt(e,10),this.#s.stores.PERSONALNOTES,t),this.#s.putStorePromise(r,s,this.#s.stores.DELETEPERSONALNOTES,!1,t)]),!0}catch(e){const{AppError:s}=await import("../../../core/errors/models/AppError.js");s.process(e,{errorCode:s.Types.DATABASE_ERROR,userMessage:"There was an error deleting your personal notes.",displayTarget:"form-msg"},!0)}}async editPersonalNotes(e){try{const{date:s,notes:r,notesID:t}=e,o=await this.#s.openDBPromise(),i={...await this.getSpecificPersonalNotes(t),notes:r},n={edit_personalNotes:!0,...i},a=o.transaction([this.#s.stores.PERSONALNOTES,this.#s.stores.EDITPERSONALNOTES],"readwrite");return await Promise.all([this.#s.putStorePromise(o,i,this.#s.stores.PERSONALNOTES,!1,a),this.#s.putStorePromise(o,n,this.#s.stores.EDITPERSONALNOTES,!1,a)]),!0}catch(e){const{AppError:s}=await import("../../../core/errors/models/AppError.js");s.process(e,{errorCode:s.Types.DATABASE_ERROR,userMessage:"There was an error editing your personal notes.",displayTarget:"form-msg"},!0)}}}