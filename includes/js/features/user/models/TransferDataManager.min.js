// @ts-nocheck
import IndexedDBOperations from"../../../core/database/IndexedDBOperations.js";import{dataAPI}from"../../../core/network/api/apiEndpoints.js";import{fetchData}from"../../../core/network/services/network.js";import{safeDisplayMessage}from"../../../core/utils/dom/messages.js";import{getValidationToken}from"../../../tracker.js";export class TransferDataManager{#e;#t;#r=new Map;static#a={green:"/public/siteImages/indicator_green_light.webp",red:"/public/siteImages/indicator_red_light.png",yellow:"/public/siteImages/indicator_yellow_light.webp",orange:"/public/siteImages/indicator_orange_light.png"};static#s={SUCCESS:"success",PARTIAL:"partial",FAILED:"failed",NO_DATA:"no-data",ERROR:"error",SERVER_ERROR:"server-error",AUTH_ERROR:"auth-error"};constructor(e){this.#e=e,this.#t=new IndexedDBOperations}async transferData(){const e=await Promise.allSettled(this.#i().map((async e=>{const t=this.#n(e.imgIndicatorId);this.#o(t,"yellow");try{return await this.#d(e)}catch(t){return console.warn(`Transfer failed for ${e.label}:`,t),{status:"failed",label:e.label,error:t.message}}})));this.#l(e)}#i(){return[{api:dataAPI.transfer,table:"clients",localStore:this.#t.stores.CLIENTLIST,imgIndicatorId:"clients-indicator",label:"Client Data"},{api:dataAPI.transfer,table:"trimming",localStore:this.#t.stores.TRIMMING,imgIndicatorId:"trimmings-indicator",label:"Trimming Data"},{api:dataAPI.transfer,table:"personal_notes",localStore:this.#t.stores.PERSONALNOTES,imgIndicatorId:"personal-notes-indicator",label:"Personal Notes"},{api:dataAPI.transfer,table:"date_time",localStore:this.#t.stores.USERSETTINGS,imgIndicatorId:"date-time-indicator",label:"Date/Time Settings"},{api:dataAPI.transfer,table:"farrier_prices",localStore:this.#t.stores.USERSETTINGS,imgIndicatorId:"farrier-prices-indicator",label:"Farrier Prices"},{api:dataAPI.transfer,table:"mileage_charges",localStore:this.#t.stores.USERSETTINGS,imgIndicatorId:"mileage-charges-indicator",label:"Mileage Charges"},{api:dataAPI.transfer,table:"schedule_options",localStore:this.#t.stores.USERSETTINGS,imgIndicatorId:"schedule-options-indicator",label:"Schedule Options"},{api:dataAPI.transfer,table:"color_options",localStore:this.#t.stores.USERSETTINGS,imgIndicatorId:"color-options-indicator",label:"Color Options"}]}async#d(e){const t=this.#n(e.imgIndicatorId);try{const r=await fetchData({api:e.api,data:{table:e.table},token:getValidationToken()});if(console.log("Server Response: ",r),!r)throw new Error("No response received from server");return await this.#c(r,e,t)}catch(e){throw this.#o(t,"red"),e}}async#c(e,t,r){const{status:a,data:s,maxID:i,store:n,property:o}=e;switch(a){case TransferDataManager.#s.SUCCESS:return await this.#g({response:e,config:t,indicator:r});case TransferDataManager.#s.NO_DATA:return this.#o(r,"orange"),{status:"no-data",message:e.msg};case TransferDataManager.#s.ERROR:case TransferDataManager.#s.AUTH_ERROR:case TransferDataManager.#s.SERVER_ERROR:return this.#o(r,"red"),{status:a,message:e.msg}}}async#g({response:e,config:t,indicator:r}){const{data:a,maxID:s,store:i,property:n}=e,o=await this.#t.openDBPromise();try{if("user_settings"===i){return{...await this.#h({data:a,property:n,indicator:r}),type:"settings"}}const e=[];if(Array.isArray(a)){const t=await this.#p({db:o,store:i,data:a,indicator:r});e.push({...t,type:"store"})}if(s?.length){const t=await this.#u({db:o,maxID:s,indicator:r});e.push({...t,type:"maxid"})}if(0===e.length)throw new Error(`Invalid response format for ${i}`);const t=e.every((e=>"success"===e.status))?"success":e.every((e=>"failed"===e.status))?"failed":"partial";return this.#o(r,"success"===t?"green":"partial"===t?"orange":"red"),1===e.length?e[0]:{results:e,status:t,type:"store"}}catch(e){throw this.#o(r,"red"),e}}#l(e){const t=e.reduce(((e,t)=>{if("fulfilled"===t.status)if("no-data"===t.value.status)e.noData||(e.noData=[]),e.noData.push(t.value);else if("server-error"===t.value.status)e.serverErrors||(e.serverErrors=[]),e.serverErrors.push(t.value);else{const r=t.value.type||"unknown";e[r]||(e[r]=[]),e[r].push(t.value)}else e.errors||(e.errors=[]),e.errors.push(t.reason);return e}),{settings:[],store:[],maxid:[],errors:[],noData:[],serverErrors:[]});this.#f(t)}#f(e){let t=[];e.errors?.length&&t.push(`Failed transfers: ${e.errors.length}`),e.serverErrors?.length&&t.push(`Server errors: ${e.serverErrors.length}`),e.noData?.length&&t.push(`No data available: ${e.noData.length}`);const r=e.store?.filter((e=>"partial"===e.status))||[];r.length&&t.push(`Partial transfers: ${r.length}`),console.log("Summary:",e);const a=(e.settings?.length||0)+(e.store?.filter((e=>!e.type?.includes("maxid"))).length||0);a&&t.push(`Successful transfers: ${a}`);const s=a+(e.errors?.length||0)+(e.serverErrors?.length||0)+(e.noData?.length||0);t.push(`Total transfers processed: ${s} of 8`),safeDisplayMessage({elementId:"form-msg",message:t.join("<br>"),isSuccess:!e.errors?.length&&!e.serverErrors?.length})}#n(e){if(!this.#r.has(e)){const t=document.getElementById(e);if(!t)throw new Error(`Indicator element with id "${e}" not found`);this.#r.set(e,t)}return this.#r.get(e)}#o(e,t){e&&TransferDataManager.#a[t]&&(e.src=TransferDataManager.#a[t])}async#h({data:e,property:t,indicator:r}){try{await this.#t.openDBPromise();const a=await this.#e.updateLocalUserSettings({userData:e,settingsProperty:t,waitForCompletion:!0}).catch((e=>(console.warn(`Settings update failed for ${t}:`,e),!1)));let s=!1;if(a){const r=await this.#e.getSettings(t);s=r&&r[t]&&JSON.stringify(r[t])===JSON.stringify(e)}return this.#o(r,s?"green":"orange"),{success:s,property:t,status:s?"success":"partial",label:`${t} settings`}}catch(e){return this.#o(r,"red"),{success:!1,property:t,status:"failed",error:e.message,label:`${t} settings`}}}async#p({db:e,store:t,data:r,indicator:a}){await this.#t.clearStorePromise(e,t);let s=0;for(const a of r)try{await this.#t.putStorePromise(e,a,t),s++}catch(e){console.error(`Failed to store item in ${t}:`,e)}const i=0===s?"failed":s===r.length?"success":"partial";return this.#o(a,"success"===i?"green":"partial"===i?"orange":"red"),{status:i,store:t,total:r.length,succeeded:s}}async#u({db:e,maxID:t,indicator:r}){let a=0;for(const{id:r,keyPath:s,store:i}of t)try{await this.#t.putStorePromise(e,{[s]:r},i),a++}catch(e){console.error(`Failed to store maxID for ${i}:`,e)}const s=a===t.length?"success":a>0?"partial":"failed";return this.#o(r,"success"===s?"green":"partial"===s?"orange":"red"),{status:s,succeeded:a,total:t.length}}}