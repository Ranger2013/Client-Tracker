// @ts-nocheck
import{buildElementTree}from"../../../core/utils/dom/elements.js";import{addListener}from"../../../core/utils/dom/listeners.js";import{safeDisplayMessage}from"../../../core/utils/dom/messages.js";export class Calendar{#e;#t;#r=[];#a;#s;#n;#i;static#o=["January","February","March","April","May","June","July","August","September","October","November","December"];constructor({manageUser:e,componentId:t,messageContainer:r}){this.#e=e,this.#n=t,this.#i=r,this.#a=(new Date).getMonth(),this.#s=(new Date).getFullYear()}#d(){this.#t.querySelector("#current-month").textContent=`${Calendar.#o[this.#a]} ${this.#s}`}#l(){const e=new Date(this.#s,this.#a+1,0).getDate(),t=new Date(this.#s,this.#a,1).getDay();let r='<table width="100%" border="1"><thead><tr>';["Sun","Mon","Tue","Wed","Thu","Fri","Sat"].forEach((e=>{r+=`<th>${e}</th>`})),r+="</tr></thead><tbody>";let a=1;for(let s=0;s<6&&!(a>e);s++){r+="<tr>";for(let n=0;n<7;n++)if(0===s&&n<t)r+="<td></td>";else if(a>e)r+="<td></td>";else{const e=`${this.#s}-${String(this.#a+1).padStart(2,"0")}-${String(a).padStart(2,"0")}`,t=this.#r.includes(e);r+=`<td class="day${t?" selected":""}" data-date="${e}">${a}</td>`,a++}r+="</tr>"}return r+="</tbody></table>",r}#c(e){this.#a+=e,this.#a>11?(this.#a=0,this.#s++):this.#a<0&&(this.#a=11,this.#s--),this.#h()}#u(e){const t=e.dataset.date,r=this.#r.indexOf(t);r>-1?(this.#r.splice(r,1),e.classList.remove("selected")):(this.#r.push(t),e.classList.add("selected"))}async#m(){try{await this.#e.updateLocalUserSettings({userData:this.#r,settingsProperty:"blocked_dates"}),safeDisplayMessage({elementId:this.#i,message:"Dates saved successfully",isSuccess:!0})}catch(e){const{AppError:t}=await import("../../../core/errors/models/AppError.js");t.handleError(e)}}async#p(){this.#r=[],await this.#m(),this.#h()}#h(){this.#t.querySelector("#calendar-grid").innerHTML=this.#l(),this.#d()}async initialize(){try{if(!this.#n)throw new Error("Component ID is required");const e=await this.#e.getSettings("blocked_dates");return e?.blocked_dates&&(this.#r=e.blocked_dates),this.#t=this.#g(),this.#h(),this.#t}catch(e){const{AppError:t}=await import("../../../core/errors/models/AppError.js");t.handleError(e)}}async setupListeners(){if(!this.#n)throw new Error("Component ID is required for event listeners");[{id:"prev-month",handler:()=>this.#c(-1)},{id:"next-month",handler:()=>this.#c(1)},{id:"calendar-grid",handler:e=>{e.target.classList.contains("day")&&this.#u(e.target)}},{id:"save-dates",handler:()=>this.#m()},{id:"clear-dates",handler:()=>this.#p()}].forEach((({id:e,handler:t})=>{addListener({elementOrId:e,eventType:"click",handler:t,componentId:this.#n})}))}#g(){return buildElementTree({type:"div",attributes:{id:"calendar-container"},children:{title:{type:"div",myClass:["w3-padding-small","w3-margin-top","w3-small"],text:"Select dates that you wish to be notified to not set bookings on."},header:{type:"div",myClass:["w3-margin-bottom","w3-center","w3-margin-top"],children:{prevButton:{type:"button",attributes:{id:"prev-month",style:"margin-right: 10px"},text:"&lt;"},monthDisplay:{type:"span",attributes:{id:"current-month"}},nextButton:{type:"button",attributes:{id:"next-month",style:"margin-left: 10px"},text:"&gt;"}}},calendar:{type:"div",attributes:{id:"calendar-grid"},myClass:["w3-margin-bottom"]},buttons:{type:"div",myClass:["w3-center"],children:{save:{type:"button",myClass:["w3-button","w3-black","w3-margin-right"],attributes:{id:"save-dates"},text:"Save Dates"},clear:{type:"button",myClass:["w3-button","w3-red","w3-margin-left"],attributes:{id:"clear-dates"},text:"Clear All Dates"}}}}})}}