// @ts-nocheck
import{accountAPI}from"../../../../../../../core/network/api/apiEndpoints.js";import{fetchData}from"../../../../../../../core/network/services/network.js";import{closeModal}from"../../../../../../../core/services/modal/openModal.js";import{getValidElement}from"../../../../../../../core/utils/dom/elements.js";import{addListener,removeListeners}from"../../../../../../../core/utils/dom/listeners.js";import{safeDisplayMessage}from"../../../../../../../core/utils/dom/messages.js";import{getValidationToken}from"../../../../../../../tracker.js";const COMPONENT="Unpaid Invoices Page",DEBUG=!1,debugLog=(...e)=>{false};export default async function unpaidInvoices({tabContentContainer:e,manageUser:t,componentId:r}){try{initializeEventHandlers({manageUser:t,componentId:r})}catch(e){const{AppError:t}=await import("../../../../../../../core/errors/models/AppError.js");t.handleError(e,{errorCode:t.Types.INITIALIZATION_ERROR,userMessage:t.BaseMessages.system.initialization})}}function initializeEventHandlers({manageUser:e,componentId:t}){const r={"user-info":{events:["click"],handler:async r=>{const{default:a}=await import("../../../../../../../core/layout/user/pages/my-account/invoices/buildClientInvoiceManagementModalPage.js");await a({evt:r,manageUser:e,componentId:t})}}},a={"click:paid-button":async e=>{await handlePaidButtonClick(e)}};addListener({elementOrId:"invoice-table",eventType:"click",handler:async e=>{try{const t=e.target.id;for(const a in r)if(t.startsWith(a)){const t=r[a];return void(t.events.includes(e.type)&&t.handler(e))}}catch(e){const{AppError:t}=await import("../../../../../../../core/errors/models/AppError.js");t.handleError(e,{errorCode:t.Types.RENDER_ERROR,userMessage:"Unable to display the invoice management modal."})}},componentId:t}),addListener({elementOrId:"modal-content",eventType:["click"],handler:async e=>{debugLog(e.type,e.target.id);const t=`${e.type}:${e.target.id}`;a[t]&&a[t](e)},componentId:t})}async function handlePaidButtonClick(e){try{safeDisplayMessage({elementId:"modal-msg",message:"Processing...",isSuccess:!0,color:"w3-text-blue"});const t=e.target.dataset,r=t.cid,a=t.trimid,o={key:"invoice-paid",data:{cID:r,trimID:a}},s=await fetchData({api:accountAPI.markInvoicePaid,data:o,token:getValidationToken()});if(debugLog(),"success"===s.status){closeModal("unpaid-invoices-modal-listeners");getValidElement(`${r}:${a}`).remove();try{await updateUserTrimInfo({cID:r,trimID:a})}catch(e){const{AppError:t}=await import("../../../../../../../core/errors/models/AppError.js");t.handleError(e,{errorCode:t.Types.DATABASE_ERROR,userMessage:"Server operation was successful, but local database update failed.",displayTarget:"form-msg"})}}}catch(e){const{AppError:t}=await import("../../../../../../../core/errors/models/AppError.js");t.handleError(e,{errorCode:t.Types.DATABASE_ERROR,userMessage:t.BaseMessages.system.database,displayTarget:"modal-msg"})}}async function updateUserTrimInfo({cID:e,trimID:t}){const{default:r}=await import("../../../../../../client/models/ManageClient.js"),a=new r({debug:!1}),o=await a.getClientTrimmingInfo(e);debugLog();const s=o.findIndex((e=>e.trimID===parseInt(t,10)));if(-1===s)throw new Error(`Trim ID ${t} not found for client ${e}`);return o[s].paid="yes",debugLog(),await a.updateClientTrimmingInfo({cID:e,trimmingInfo:o}),!0}