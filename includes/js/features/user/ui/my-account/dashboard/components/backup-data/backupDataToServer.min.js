// @ts-nocheck
import IndexedDBOperations from"../../../../../../../core/database/IndexedDBOperations.js";import{dataAPI}from"../../../../../../../core/network/api/apiEndpoints.js";import{fetchData}from"../../../../../../../core/network/services/network.js";import{getValidationToken}from"../../../../../../../tracker.js";import handleClearingStore from"./handleClearingStore.js";export default async function backupDataToServer({tabContainer:e}){try{const r=e.querySelectorAll('[data-hasdata="true"]');if(0===Array.from(r).map((e=>e.dataset.store)).length)return;const t=new IndexedDBOperations,a=await t.openDBPromise();for(const e of r){const r=e.dataset.store,o=await t.getAllStorePromise(a,r);e.src="/public/siteImages/indicator_yellow_light.webp";try{const s=await fetchData({api:dataAPI.backup,data:o,token:getValidationToken()}),i=s[0];"ok"===i.status||"no-update"===i.status?(await handleClearingStore({indexed:t,db:a,response:s,store:r}),e.src="/public/siteImages/indicator_green_light.webp"):e.src="/public/siteImages/indicator_red_light.png"}catch(r){e.src="/public/siteImages/indicator_red_light.png";const{AppError:t}=await import("../../../../../../../core/errors/models/AppError.js");t.handleError(r,{errorCode:t.Types.API_ERROR,userMessage:t.BaseMessages.system.network})}}}catch(e){const{AppError:r}=await import("../../../../../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.BACKUP_ERROR,userMessage:r.BaseMessages.system.backup},!0)}}