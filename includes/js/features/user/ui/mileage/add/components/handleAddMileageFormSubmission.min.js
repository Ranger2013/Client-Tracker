// @ts-nocheck
import setupBackupNotice from"../../../../../../core/services/backup-notice/backupNotice.js";import{getValidElement}from"../../../../../../core/utils/dom/elements.js";import{clearMsg,safeDisplayMessage}from"../../../../../../core/utils/dom/messages.js";import ManageMileage from"../../../../models/ManageMileage.js";const COMPONENT="Handle Add Mileage Form Submission",DEBUG=!1,debugLog=(...e)=>{false};export default async function handleAddMileageFormSubmission({evt:e,manageClient:i,manageUser:a}){try{clearMsg({container:"form-msg"});const i=Object.fromEntries(new FormData(e.target)),n=validateMileageForm(i);if(n.length>0)return void renderErrors(n);await handleFormSubmission({userData:i,manageUser:a})&&showSuccessMessage({evt:e,manageUser:a})}catch(e){const{AppError:i}=await import("../../../../../../core/errors/models/AppError.js");i.handleError(e,{errorCode:i.Types.FORM_SUBMISSION_ERROR,message:i.BaseMessages.forms.submissionFailed})}}function validateMileageForm(e){const i={selectDestination:{inputId:"select-destination",inputName:"destination",isValid:()=>"null"!==e?.destination,errorMsg:"Please select a destination",errorContainer:"destination-error"},inputDestination:{inputId:"input-destination",inputName:"destination",isValid:()=>""!==e?.destination?.trim(),errorMsg:"Please enter a destination",errorContainer:"destination-error"},startingMiles:{inputId:"starting-mileage",inputName:"starting_mileage",isValid:()=>(debugLog((Number(e?.starting_mileage),Number(e?.ending_mileage))),Number(e?.starting_mileage)<Number(e?.ending_mileage)),errorMsg:"Starting mileage cannot be more than ending mileage",errorContainer:"starting-mileage-error"},endingMiles:{inputId:"ending-mileage",inputName:"ending_mileage",isValid:()=>Number(e?.ending_mileage)>Number(e?.starting_mileage),errorMsg:"Ending mileage cannot be less than starting mileage",errorContainer:"ending-mileage-error"}};return[...e.hasOwnProperty("destination")?[]:[{inputId:null,inputError:"destination-error",msg:"Please enter a destination"}],...Object.entries(i).filter((([e,i])=>!i.isValid())).map((([e,i])=>({inputId:i.inputId,inputError:i.errorContainer,msg:i.errorMsg})))]}function renderErrors(e){safeDisplayMessage({elementId:"form-msg",message:"Please correct the errors below"}),e.forEach((({inputId:e,inputError:i,msg:a})=>{safeDisplayMessage({elementId:i,message:a,targetId:e})}))}async function handleFormSubmission({userData:e,manageUser:i}){const a=new ManageMileage({debug:!1}),n={add_mileage:!0,difference:Number(e.ending_mileage)-Number(e.starting_mileage),date:(new Date).toISOString().slice(0,10),...e};debugLog();return!!await a.addMileage(n)}function showSuccessMessage({evt:e,manageUser:i}){safeDisplayMessage({elementId:"form-msg",message:"Mileage added successfully",isSuccess:!0}),e.target.reset(),closeAndDisableInputAndSelectFields(),setupBackupNotice({manageUser:i})}function closeAndDisableInputAndSelectFields(){const e=getValidElement("select-destination"),i=getValidElement("input-destination"),a=getValidElement("client-list-display-container");getValidElement("destination-display-container").classList.add("w3-hide"),a.classList.add("w3-hide"),e.disabled=!0,i.disabled=!0}