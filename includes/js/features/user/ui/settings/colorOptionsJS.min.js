// @ts-nocheck
import displayFormValidationErrors from"../../../../core/utils/dom/forms/displayFormValidationErrors.js";import{addListener}from"../../../../core/utils/dom/listeners.js";import{clearMsg,safeDisplayMessage}from"../../../../core/utils/dom/messages.js";import ManageUser from"../../models/ManageUser.js";import populateColorOptionsForm from"./components/color-options/populateColorOptions.js";const COMPONENT_ID="color-options",manageUser=new ManageUser;function validateColor(o){const e=/^#[0-9a-fA-F]{6}$/,r=[];for(const[s,a]of Object.entries(o))e.test(a)||r.push({input:s,msg:"Invalid color format."});return r.length>0?r:null}async function handleColorOptionFormSubmission(o){o.preventDefault();try{clearMsg({container:"form-msg"});const e=Object.fromEntries(new FormData(o.target)),r=validateColor(e);if(r)return void await displayFormValidationErrors(r);const s=manageUser.getStoreNames();if(await manageUser.updateLocalUserSettings({userData:e,settingsProperty:"color_options",backupStore:s.COLOROPTIONS,backupAPITag:"add_colorOptions"}))return void safeDisplayMessage({elementId:"form-msg",message:"Color Options have been saved",isSuccess:!0});safeDisplayMessage({elementId:"form-msg",message:"Unable to save color options at this time."})}catch(o){const{AppError:e}=await import("../../../../core/errors/models/AppError.js");e.handleError(o,{errorCode:e.Types.FORM_SUBMISSION_ERROR,userMessage:e.BaseMessages.forms.submissionFailed,displayTarget:"form-msg"})}}populateColorOptionsForm({form:"color-options-form",manageUser:manageUser}),addListener({elementOrId:"color-options-form",eventType:"submit",handler:handleColorOptionFormSubmission,componentId:COMPONENT_ID});