// @ts-nocheck
import{safeDisplayMessage}from"../../../../../../core/utils/dom/messages.min.js";import{isNumeric}from"../../../../../../core/utils/validation/validators.min.js";import{top}from"../../../../../../core/utils/window/scroll.min.js";export default async function handlePerMileFormSubmission({evt:e,manageUser:s}){e.preventDefault();try{const r=document.getElementById("by-mile-container"),t=Object.fromEntries(new FormData(e.target));try{const e=validateForm(t);if(e.length>0){const{default:s}=await import("../../../../../../core/utils/dom/forms/displayFormValidationErrors.js");return void await s(e)}}catch(e){const{AppError:s}=await import("../../../../../../core/errors/models/AppError.min.js");return s.handleError(e,{errorCode:s.Types.FORM_VALIDATION_ERROR,userMessage:s.BaseMessages.forms.validationFailed,displayTarget:"form-msg"}),void(document.getElementById("submit-button").disabled=!0)}const{addFuelCharges:a}=await import("./manageFuelCharges.js");if(!await a({userData:t,formType:"mile",manageUser:s}))throw new Error("Failed to add fuel charges");safeDisplayMessage({elementId:"form-msg",message:"Fuel Charges have been added",isSuccess:!0}),e.target.reset(),r.classList.add("w3-hide"),top()}catch(e){console.warn("Handle per mile form submission error: ",e);const{AppError:s}=await import("../../../../../../core/errors/models/AppError.min.js");s.handleError(e,{errorCode:s.Types.FORM_SUBMISSION_ERROR,userMessage:s.BaseMessages.forms.submissionFailed,displayTarget:"form-msg"})}}function validateForm(e){const s=[];return isNumeric(e.starting_mile)||s.push({input:"starting_mile",msg:"Starting mile must be numeric"}),isNumeric(e.cost_per_mile)||s.push({input:"cost_per_mile",msg:"Cost per mile must be numeric"}),""===e.base_cost||isNumeric(e.base_cost)||s.push({input:"base_cost",msg:"Base cost must be numeric if provided"}),s}