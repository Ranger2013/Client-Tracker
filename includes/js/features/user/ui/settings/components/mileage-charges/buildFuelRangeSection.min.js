// @ts-nocheck
import{buildEle}from"../../../../../../core/utils/dom/elements.min.js";import{addListener}from"../../../../../../core/utils/dom/listeners.min.js";import{clearMsg}from"../../../../../../core/utils/dom/messages.min.js";export default function buildFuelRangeSection(e,r={},l){try{const t=buildElements({row:{type:"div",myClass:["w3-row","w3-padding-small"],children:["colOne","colTwo"]},colOne:{type:"div",myClass:["w3-col","m6"],text:`Mileage Range ${e}`},colTwo:{type:"div",myClass:["w3-col","m6"]},mileageRange:{build:()=>buildMileageRangeInput(e,r.range,l)},costInput:{build:()=>buildCostInput(e,r.cost,l)}});return t?(t.colTwo.append(t.mileageRange,t.costInput),t.row.append(t.colOne,t.colTwo),t.row):null}catch(e){throw e}}function buildElements(e){const r={};try{return Object.entries(e).map((([e,l])=>{if(r[e]=l.build?l.build():buildEle(l),!r[e])throw new Error(`Failed to build ${e}`)})),r}catch(e){throw new Error(`Error building elements: ${e}`)}}function buildMileageRangeInput(e,r,l){try{const t=buildEle({type:"p"}),i=buildEle({type:"label",attributes:{for:`mileage-range-${e}`},text:"Mileage Range"}),n=buildEle({type:"span",myClass:["w3-small"],text:"(format: 50-59)"}),o=buildEle({type:"input",attributes:{id:`mileage-range-${e}`,type:"text",title:"Mileage Range: e.g. 50-59",placeholder:"Mileage Range: 50-59",name:`mileage_range_${e}`,required:"required",value:r||""},myClass:["w3-input","w3-border"]}),a=buildEle({type:"div",attributes:{id:`mileage-range-${e}-error`}});return t.appendChild(i),t.appendChild(n),t.appendChild(o),t.appendChild(a),addListener({elementOrId:o,eventType:"focus",handler:async()=>clearMsg({container:a,input:o}),componentId:l}),t}catch(e){import("../../../../../../core/errors/models/AppError.min.js").then((({AppError:r})=>{throw new r("Error building mileage range inputs: ",{originalError:e,shouldLog:!0,userMessage:null,errorCode:"RENDER_ERROR",displayTarget:"fuel-range-container"}).handle()})).catch((e=>console.error("Error handling failed for building mileage range inputs: ",e)))}}function buildCostInput(e,r,l){try{const t=buildEle({type:"p"}),i=buildEle({type:"label",attributes:{for:`fuel-cost-${e}`},text:"Fuel Cost"}),n=buildEle({type:"input",attributes:{id:`fuel-cost-${e}`,type:"number",title:"Fuel Costs",placeholder:"Fuel Costs",name:`fuel_cost_${e}`,required:"required",value:r||""},myClass:["w3-input","w3-border"]}),o=buildEle({type:"div",attributes:{id:`fuel-cost-${e}-error`}});return t.appendChild(i),t.appendChild(n),t.appendChild(o),addListener({elementOrId:n,eventType:"focus",handler:()=>clearMsg({container:o,input:n}),componentId:l}),t}catch(e){import("../../../../../../core/errors/models/AppError.min.js").then((({AppError:r})=>{throw new r("Error building cost inputs: ",{originalError:e,shouldLog:!0,userMessage:null,errorCode:"RENDER_ERROR",displayTarget:"fuel-range-container"}).handle()})).catch((e=>console.error("Error handling failed for building cost inputs: ",e)))}}