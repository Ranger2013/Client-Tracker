// @ts-nocheck
export async function addFuelCharges({userData:e,formType:r,manageUser:a}){try{const s=await buildMileageStructure({formType:r,userData:e});return await handleMileageChargesIDBOoperation({userData:s,manageUser:a})}catch(e){const{AppError:r}=await import("../../../../../../core/errors/models/AppError.js");return r.handleError(e,{errorCode:r.Types.FORM_SUBMISSION_ERROR,userMessage:"Failed to add fuel charges",displayTarget:"form-msg"}),!1}}async function buildRangeData({userData:e}){try{return Array.from({length:parseInt(e.fuel_ranges,10)},((r,a)=>({range:e[`mileage_range_${a+1}`],cost:e[`fuel_cost_${a+1}`]})))}catch(e){const{AppError:r}=await import("../../../../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATA_ERROR,userMessage:"Failed to build range data",displayTarget:"form-msg"},!0)}}async function buildMileageStructure({formType:e,userData:r}){if("range"!==e&&"mile"!==e)throw new Error("Invalid form type");return{range:{per_mile:{starting_mile:null,cost_per_mile:null,base_cost:null},range:await buildRangeData({userData:r})},mile:{per_mile:{starting_mile:r.starting_mile,cost_per_mile:r.cost_per_mile,base_cost:r?.base_cost||null},range:[]}}[e]}async function handleMileageChargesIDBOoperation({userData:e,manageUser:r}){try{const a=r.getStoreNames();return await r.updateLocalUserSettings({userData:e,settingsProperty:"mileage_charges",backupStore:a.MILEAGECHARGES,backupAPITag:"add_fuelCosts"}),!0}catch(e){const{AppError:r}=await import("../../../../../../core/errors/models/AppError.js");r.process(e,{errorCode:r.Types.DATABASE_ERROR,userMessage:r.BaseMessages.system.generic,displayTarget:"form-msg"},!0)}}