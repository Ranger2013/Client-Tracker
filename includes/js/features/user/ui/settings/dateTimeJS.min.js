// @ts-nocheck
import{addListener,removeListeners}from"../../../../core/utils/dom/listeners.js";import{clearMsg,safeDisplayMessage}from"../../../../core/utils/dom/messages.js";import{disableEnableSubmitButton}from"../../../../core/utils/dom/elements.js";import ManageUser from"../../models/ManageUser.js";import populateDateTimeForm from"./components/date-time/populateDateTimeForm.js";const COMPONENT_ID="date-time",COMPONENT_ERROR="date-time-error",manageUser=new ManageUser,timeZone=document.getElementById("time-zone"),dateFormat=document.getElementById("date-format");async function handleFormSubmission(e){e.preventDefault();try{safeDisplayMessage({elementId:"form-msg",message:"Processing...",isSuccess:!0,color:"w3-text-blue"});if(!validateForm(e.target))return void safeDisplayMessage({elementId:"form-msg",message:"Please correct the following errors."});const r=Object.fromEntries(new FormData(e.target)),t=manageUser.getStoreNames(),a=await manageUser.updateLocalUserSettings({userData:r,settingsProperty:"date_time",backupStore:t.DATETIME,backupAPITag:"add_date_time"});safeDisplayMessage(a?{elementId:"form-msg",message:"Date/Time Options have been saved.",isSuccess:!0}:{elementId:"form-msg",message:"We were unable to save your Date/Time Options."})}catch(e){const{AppError:r}=await import("../../../../core/errors/models/AppError.js");await r.handleError(e,{errorCode:r.Types.FORM_SUBMISSION_ERROR,userMessage:"Unable to save Date/Time Options.",displayTarget:"form-msg"})}}function validateForm(e){try{const r=validateDateFormat({value:e.date_format.value,errorContainer:"date-format-error",inputContainer:"date-format"}),t=validateTimeZone({value:e.time_zone.value,errorContainer:"time-zone-error",inputContainer:"time-zone"});return disableEnableSubmitButton("submit-button"),r&&t}catch(e){return import("../../../../core/errors/models/AppError.js").then((({AppError:r})=>{throw new r("Error validating the Date/Time form",{originalError:e,errorCode:r.Types.FORM_VALIDATION_ERROR,userMessage:"Unable to validate the form.",displayTarget:"form-msg"})}))}}function validateDateFormat({value:e,errorContainer:r,inputContainer:t}){try{throw new Error("Test error thrown from validateDateFormat function.")}catch(e){return import("../../../../core/errors/models/AppError.js").then((({AppError:r})=>{throw new r("Error validating the Date Format",{originalError:e,errorCode:r.Types.FORM_VALIDATION_ERROR,userMessage:null})}))}}function validateTimeZone({value:e,errorContainer:r,inputContainer:t}){const a={"America/New_York":"Eastern Time Zone","America/Chicago":"Central Time Zone","America/Denver":"Mountain Time Zone","America/Phoenix":"Mountain Time No DST","America/Los_Angeles":"Pacific Time Zone","America/Anchorage":"Alaska Time Zone"};let o=!1;for(const r in a)if(r.toLowerCase()===e.toLowerCase()){o=!0;break}return o?(clearMsg({container:r,input:t}),disableEnableSubmitButton("submit-button"),removeListeners(COMPONENT_ERROR),!0):(safeDisplayMessage({elementId:r,message:"Please select a valid time zone.",targetId:t}),addListener({elementOrId:t,eventType:"focus",handler:()=>{clearMsg({container:r,input:t}),disableEnableSubmitButton("submit-button")},componentId:COMPONENT_ERROR}),!1)}populateDateTimeForm(manageUser,{timeZone:timeZone,dateFormat:dateFormat}),addListener({elementOrId:"date-time-form",eventType:"submit",handler:handleFormSubmission,componentId:"date-time"});