// @ts-nocheck
import{addListener,removeListeners}from"../../../../core/utils/dom/listeners.min.js";import{clearMsg,safeDisplayMessage}from"../../../../core/utils/dom/messages.min.js";import{disableEnableSubmitButton}from"../../../../core/utils/dom/elements.min.js";import ManageUser from"../../models/ManageUser.min.js";import populateDateTimeForm from"./components/date-time/populateDateTimeForm.min.js";const COMPONENT_ID="date-time",COMPONENT_ERROR="date-time-error",manageUser=new ManageUser,timeZone=document.getElementById("time-zone"),dateFormat=document.getElementById("date-format");async function handleFormSubmission(e){e.preventDefault();try{safeDisplayMessage({elementId:"form-msg",message:"Processing...",isSuccess:!0,color:"w3-text-blue"});if(!await validateFormFields(e.target))return void safeDisplayMessage({elementId:"form-msg",message:"Please correct the form errors."});const t=Object.fromEntries(new FormData(e.target)),a=manageUser.getStoreNames(),r=await manageUser.updateLocalUserSettings({userData:t,settingsProperty:"date_time",backupStore:a.DATETIME,backupAPITag:"add_date_time"});safeDisplayMessage(r?{elementId:"form-msg",message:"Date/Time Options have been saved.",isSuccess:!0}:{elementId:"form-msg",message:"We were unable to save your Date/Time Options."})}catch(e){const{AppError:t}=await import("../../../../core/errors/models/AppError.min.js");await t.handleError(e,{errorCode:t.Types.FORM_SUBMISSION_ERROR,userMessage:t.BaseMessages.forms.submissionFailed,displayTarget:"form-msg"}),document.getElementById("submit-button").disabled=!0}}async function validateFormFields(e){try{const t=validateDateFormat({value:e.date_format.value,errorContainer:"date-format-error",inputContainer:"date-format"}),a=validateTimeZone({value:e.time_zone.value,errorContainer:"time-zone-error",inputContainer:"time-zone"});return t&&a}catch(e){const{AppError:t}=await import("../../../../core/errors/models/AppError.min.js");await t.process(e,{errorCode:t.Types.FORM_VALIDATION_ERROR,userMessage:t.BaseMessages.forms.validationFailed,displayTarget:"form-msg"},!0)}}function validateDateFormat({value:e,errorContainer:t,inputContainer:a}){return["Y-m-d","m-d-Y","d-m-Y"].includes(e)?(clearMsg({container:t,input:a}),!0):(safeDisplayMessage({elementId:t,message:"Please select a valid date format.",targetId:a}),!1)}function validateTimeZone({value:e,errorContainer:t,inputContainer:a}){const r={"America/New_York":"Eastern Time Zone","America/Chicago":"Central Time Zone","America/Denver":"Mountain Time Zone","America/Phoenix":"Mountain Time No DST","America/Los_Angeles":"Pacific Time Zone","America/Anchorage":"Alaska Time Zone"};let s=!1;for(const t in r)if(t.toLowerCase()===e.toLowerCase()){s=!0;break}return s?(clearMsg({container:t,input:a}),disableEnableSubmitButton("submit-button"),removeListeners(COMPONENT_ERROR),!0):(safeDisplayMessage({elementId:t,message:"Please select a valid time zone.",targetId:a}),addListener({elementOrId:a,eventType:"focus",handler:()=>{clearMsg({container:t,input:a}),disableEnableSubmitButton("submit-button")},componentId:COMPONENT_ERROR}),!1)}populateDateTimeForm(manageUser,{timeZone:timeZone,dateFormat:dateFormat}),addListener({elementOrId:"date-time-form",eventType:"submit",handler:handleFormSubmission,componentId:"date-time"});