// @ts-nocheck
import{createAdaptiveHandler}from"../../../core/utils/dom/eventUtils.js";import{disableEnableSubmitButton}from"../../../core/utils/dom/elements";import{clearMsg,safeDisplayMessage}from"../../../core/utils/dom/messages";import{ucwords}from"../../../core/utils/string/stringUtils";import{formatEmail,formatPhone}from"../../../core/utils/dom/forms/validation";import{checkForDuplicate}from"../../services/duplicateCheck";import{checkPasswordStrength,comparePasswords}from"../../utils/passwordValidation.js";import{getTerms,handleUserRegistration}from"./components/registerUserHelpers.js";import{addListener}from"../../../core/utils/dom/listeners.js";const COMPONENT_ID="register-user-form";function initializeRegistrationForm(){const e=createAdaptiveHandler((async e=>{await checkFieldForDuplicate({field:e.target,column:"username",table:"users"})}),"validation"),t={"focusin:first-name":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:first-name":e=>handleFormatting({target:e.target,format:"first-name"}),"focusin:last-name":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:last-name":e=>handleFormatting({target:e.target,format:"last-name"}),"focusin:company-name":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:company-name":e=>handleFormatting({target:e.target,format:"company-name"}),"focusin:phone":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:phone":async e=>{await handleFormatting({target:e.target,format:"phone"})},"focusout:phone":async e=>{await checkFieldForDuplicate({field:e.target,column:"phone",table:"users"})},"focusin:email":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:email":async e=>{await handleFormatting({target:e.target,format:"email"})},"focusout:email":async e=>{await checkFieldForDuplicate({field:e.target,column:"email",table:"users"})},"focusin:username":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:username":t=>{e(t)},"focusin:password":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:password":async e=>{e.target.value&&await checkPasswordStrength({evt:e,strengthBadge:"password-strength-container",errorContainer:"password-error",submitButton:"submit-button"})},"focusin:confirm-password":e=>clearMsg({container:`${e.target.id}-error`,hide:!0,input:e.target}),"input:confirm-password":async e=>{e.target.value&&await comparePasswords({evt:e,passwordFieldId:"password",errorContainer:"confirm-password-error",submitButton:"submit-button"})},"click:terms":async e=>await getTerms("terms"),"click:privacy":async e=>await getTerms("privacy"),"submit:new-user-form":async e=>await handleUserRegistration(e)};addListener({elementOrId:"new-user-form",eventType:["focusin","input","focusout","click","submit"],handler:e=>{const r=`${e.type}:${e.target.id}`;t[r]&&t[r](e)},componentId:COMPONENT_ID}),disableEnableSubmitButton("submit-button")}async function checkFieldForDuplicate({field:e,column:t,table:r}){const a=await checkForDuplicate({value:e.value,column:t,table:r});return"duplicate"===a.status?await handleValidationResponse({response:a.msg,errorEle:`${e.id}-error`,inputEle:e}):(clearMsg({container:`${e.id}-error`,input:e}),!1)}async function handleValidationResponse({response:e,errorEle:t,inputEle:r}){return!e||(safeDisplayMessage({elementId:t,message:e,targetId:r}),disableEnableSubmitButton("submit-button"),!1)}async function handleFormatting({target:e,format:t}){const r={"first-name":{action:t=>{const r=ucwords(t);return e.value=r,!0}},"last-name":{action:t=>{const r=ucwords(t);return e.value=r,!0}},"company-name":{action:t=>{const r=ucwords(t);return e.value=r,!0}},phone:{action:async t=>{const r=formatPhone(t);return r?(e.value=r,clearMsg({container:`${e.id}-error`,input:e}),!0):(await handleValidationResponse({response:"Invalid phone format.",errorEle:`${e.id}-error`,inputEle:e}),!1)}},email:{action:async t=>{const r=formatEmail(t);return r?(e.value=r,clearMsg({container:`${e.id}-error`,input:e}),!0):(await handleValidationResponse({response:"Invalid email format.",errorEle:`${e.id}-error`,inputEle:e}),!1)}}},a=t?r[t]:r[e.id];return a?await a.action(e.value):(console.warn(`No formatting handler for ${t||e.id}`),!1)}initializeRegistrationForm();