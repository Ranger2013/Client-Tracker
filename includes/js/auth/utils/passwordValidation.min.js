// @ts-nocheck
import{clearMsg,getValidElement,safeDisplayMessage}from"../../core/utils/dom/messages.js";import{disableEnableSubmitButton}from"../../core/utils/dom/elements.js";import deepFreeze from"../../core/utils/deepFreeze.js";const PASSWORD_VALIDATION=deepFreeze({MIN_LENGTH:8,PATTERNS:{STRONG:/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\W])(?=.{8,})/,MEDIUM:/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.{8,})/},MESSAGES:{TOO_SHORT:"Password must be at least 8 characters",NO_MATCH:"Passwords do not match",WEAK:"Password must contain uppercase, lowercase, numbers and special characters",FIELD_NOT_FOUND:"Password field not found"},STYLES:{STRONG:"w3-green",MEDIUM:"w3-blue",WEAK:"w3-red error",WARNING:"w3-yellow error"},STRENGTH_LEVELS:[{test:e=>e.length<PASSWORD_VALIDATION.MIN_LENGTH,message:"Password must be at least 8 characters",style:"w3-text-red error",isValid:!1},{test:e=>PASSWORD_VALIDATION.PATTERNS.STRONG.test(e),message:"Strong",style:"w3-green",isValid:!0},{test:e=>PASSWORD_VALIDATION.PATTERNS.MEDIUM.test(e),message:"Medium",style:"w3-blue",isValid:!0},{test:()=>!0,message:"Password must contain uppercase, lowercase, numbers and special characters",style:"w3-text-red error",isValid:!1}]});export async function comparePasswords(e,r,s,t){try{const a=document.getElementById(r)?.value,o=e.target.value;if(!a)throw new Error(PASSWORD_VALIDATION.MESSAGES.FIELD_NOT_FOUND);return a!==o?(await safeDisplayMessage({elementId:s,message:PASSWORD_VALIDATION.MESSAGES.NO_MATCH}),disableEnableSubmitButton(t,!1),!1):(await clearMsg({container:s,hide:!0}),disableEnableSubmitButton(t,!0),!0)}catch(e){const{AppError:r}=await import("../../core/errors/models/AppError.js"),{ErrorTypes:s}=await import("../../core/errors/constants/errorTypes.js"),{handleError:t}=await import("../../core/errors/services/errorHandler.js");return await t(new r("Password validation failed",{originalError:e,errorCode:s.INPUT_ERROR,userMessage:"Unable to validate password. Please try again.",displayTarget:"form-msg",shouldLog:!1})),!1}}export async function checkPasswordStrength(e,r,s,t){try{const r=e.target.value;if(!r)return!1;await clearMsg({container:s,hide:!0});const a=PASSWORD_VALIDATION.STRENGTH_LEVELS.find((e=>e.test(r)));return await updateStrengthIndicator(s,a.message,a.style),disableEnableSubmitButton(t,a.isValid),a.isValid}catch(e){console.warn("Error in checkPasswordStrength:",e);const{AppError:r}=await import("../../core/errors/models/AppError.js"),{ErrorTypes:s}=await import("../../core/errors/constants/errorTypes.js"),{handleError:t}=await import("../../core/errors/services/errorHandler.js");return await t(new r("Password strength check failed",{originalError:e,errorCode:s.INPUT_ERROR,userMessage:"Unable to check password strength. Please ensure your password meets the requirements.",displayTarget:"form-msg",shouldLog:!1})),!1}}async function updateStrengthIndicator(e,r,s){try{const t=getValidElement(e);t.innerHTML=`<div class="${s} w3-padding-small w3-center">${r}</div>`,t.classList.remove("w3-hide")}catch(e){console.warn("Error in updateStrengthIndicator:",e)}}