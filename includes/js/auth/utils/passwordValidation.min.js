// @ts-nocheck
import{clearMsg,safeDisplayMessage}from"../../core/utils/dom/messages.js";import{disableEnableSubmitButton,getValidElement}from"../../core/utils/dom/elements.js";import deepFreeze from"../../core/utils/deepFreeze.js";const PASSWORD_VALIDATION=deepFreeze({MIN_LENGTH:8,PATTERNS:{STRONG:/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[\W])(?=.{8,})/,MEDIUM:/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.{8,})/},MESSAGES:{TOO_SHORT:"Password must be at least 8 characters",NO_MATCH:"Passwords do not match",WEAK:"Password must contain uppercase, lowercase, numbers and special characters",FIELD_NOT_FOUND:"Password field not found"},STYLES:{STRONG:"w3-green",MEDIUM:"w3-blue",WEAK:"w3-red error",WARNING:"w3-yellow error"},STRENGTH_LEVELS:[{test:e=>e.length<PASSWORD_VALIDATION.MIN_LENGTH,message:"Password must be at least 8 characters",style:"w3-text-red",isValid:!1},{test:e=>PASSWORD_VALIDATION.PATTERNS.STRONG.test(e),message:"Strong",style:"w3-green",isValid:!0},{test:e=>PASSWORD_VALIDATION.PATTERNS.MEDIUM.test(e),message:"Medium",style:"w3-blue",isValid:!0},{test:()=>!0,message:"Password must contain uppercase, lowercase, numbers and special characters",style:"w3-text-red",isValid:!1}]});export async function comparePasswords({evt:e,passwordFieldId:s,errorContainer:r,submitButton:t}){try{const a=getValidElement(s),o=a?a.value:null,n=e.target.value;if(!o)throw new Error(PASSWORD_VALIDATION.MESSAGES.FIELD_NOT_FOUND);return o!==n?(safeDisplayMessage({elementId:r,message:PASSWORD_VALIDATION.MESSAGES.NO_MATCH}),disableEnableSubmitButton(t,!1),!1):(await clearMsg({container:r,hide:!0}),disableEnableSubmitButton(t,!0),!0)}catch(e){console.log("Error in comparePasswords:",e);const{AppError:s}=await import("../../core/errors/models/AppError.js");return s.handleError(e,{errorCode:s.Types.INPUT_ERROR,userMessage:"Unable to validate password. Please try again.",displayTarget:"form-msg",shouldLog:!1}),!1}}export async function checkPasswordStrength({evt:e,strengthBadge:s,errorContainer:r,submitButton:t}){try{const s=e.target.value;if(!s)return!1;await clearMsg({container:r,hide:!0});const a=PASSWORD_VALIDATION.STRENGTH_LEVELS.find((e=>e.test(s)));return await updateStrengthIndicator(r,a.message,a.style),disableEnableSubmitButton(t),a.isValid}catch(e){console.warn("Error in checkPasswordStrength:",e);const{AppError:s}=await import("../../core/errors/models/AppError.js");return s.handleError(e,{errorCode:ErrorTypes.INPUT_ERROR,userMessage:"Unable to check password strength. Please ensure your password meets the requirements.",displayTarget:"form-msg",shouldLog:!1}),!1}}async function updateStrengthIndicator(e,s,r){(e=getValidElement(e)).classList.remove("w3-red","w3-blue","w3-green","w3-yellow"),safeDisplayMessage({elementId:e,message:s,isSuccess:!r.includes("w3-text-red"),color:r})}