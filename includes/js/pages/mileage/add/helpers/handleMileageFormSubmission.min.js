// @ts-nocheck
import ManageUserMileage from"../../../../classes/ManageUserMileage.js";export default async function handleMileageFormSubmission(e){try{const a=Object.fromEntries(new FormData(e.target)),t=validateMileageData(a);if("validation-error"===t.status)return t;const r=new ManageUserMileage,s=r.setMileageStructure(a);return await r.addUserMileage(s)}catch(e){const{handleError:a}=await import("../../../../utils/error-messages/handleError.js");await a("handleMileageFormSubmissionError","Handle mileage form submission error: ",e)}}function validateMileageData(e){if(!e.destination)return{status:"validation-error",msg:"Please enter a destination."};const a=parseInt(e.starting_miles||"0",10),t=parseInt(e.ending_miles||"0",10);return isNaN(a)||isNaN(t)?{status:"validation-error",msg:"Please enter a valid mileage."}:t<=a?{status:"validation-error",msg:"Ending mileage must be greater than starting mileage."}:{status:"success",data:{startMiles:a,endMiles:t}}}