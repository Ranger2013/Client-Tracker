// @ts-nocheck
import IndexedDBOperations from"../../../../../classes/IndexedDBOperations.js";import{buildEle}from"../../../../../utils/dom/domUtils.js";const buildIndicatorRow=t=>({row:buildEle({type:"div",myClass:["w3-row","w3-border-bottom","w3-padding-top","w3-padding-bottom"]}),firstCol:buildEle({type:"div",myClass:["w3-col","s11","w3-small"],text:t.message}),secondCol:buildEle({type:"div",myClass:["w3-col","s1","w3-small"]}),imgIndicator:buildEle({type:"img",attributes:{id:t.indicatorID,src:"/public/siteImages/indicator_green_light.webp",width:"25px",height:"25px"}})}),getIndicatorRow=(t,o,e)=>{const i=buildIndicatorRow(e[o]),r=t?.length>0;return r&&(i.imgIndicator.src="/public/siteImages/indicator_blue_light.png"),i.row.append(i.firstCol,i.secondCol),i.secondCol.appendChild(i.imgIndicator),{row:i.row,hasData:r}};export default async function handleIndicatorLights(t){try{const o=new IndexedDBOperations,e=await o.openDBPromise(),i=document.createDocumentFragment();let r=!1,s=[];for(const a in t){const d=await o.getAllStorePromise(e,t[a].store),{row:n,hasData:l}=getIndicatorRow(d,a,t);l&&(r=!0,s.push(t[a])),i.appendChild(n)}return[i,r,s.length>0?s:null]}catch(t){const{default:o}=await import("../../../../../utils/error-messages/errorLogs.js");throw await o("handleIndicatorLightsError","Get indicator lights error: ",t),t}}