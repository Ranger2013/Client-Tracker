// @ts-nocheck
import IndexedDBOperations from"../../../../../classes/IndexedDBOperations.js";import{getValidationToken}from"../../../../../tracker.js";import errorLogs from"../../../../../utils/error-messages/errorLogs.js";import{backupDataAPI}from"../../../../../utils/network/apiEndpoints.js";import{fetchData}from"../../../../../utils/network/network.js";import handleClearingStore from"./handleClearingStore.js";import handleDisplayMsg from"./handleDisplayMsg.js";import setIndicatorLights from"./setIndicatorLights.js";export default async function backUpDataToServer(t,e,r){t.preventDefault();try{const t=document.getElementById("backup-msg-error"),e=document.getElementById("backup-msg-success"),a=new IndexedDBOperations,o=await a.openDBPromise(),s=[];for(const t of r){const e=document.getElementById(t.indicatorID);e.src="/public/siteImages/indicator_yellow_light.webp";const r=await a.getAllStorePromise(o,t.store),i=await fetchData({api:backupDataAPI,data:r,token:await getValidationToken()});s.push(i),await handleClearingStore(a,o,i,t.store),await setIndicatorLights(i,e)}return await handleDisplayMsg(s,e,t),!s.flat().some((t=>["error","server-error","validation-error"].includes(t.status)))}catch(t){throw await errorLogs("backupDataToServerError","Backup data to server error: ",t),t}}