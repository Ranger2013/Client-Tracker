// @ts-nocheck
import IndexedDBOperations from"../../../../../classes/IndexedDBOperations";import{getValidationToken}from"../../../../../tracker.js";import{top}from"../../../../../utils/dom/domUtils.js";import{transferDataAPI}from"../../../../../utils/network/apiEndpoints.js";import{fetchData}from"../../../../../utils/network/network.js";import handleDisplayMsg from"../../backup-data/helpers/handleDisplayMsg.js";const indexed=new IndexedDBOperations,handleUpdatingIDBOperations=async e=>{try{console.log("response",e);const{data:t,property:r,store:a,maxID:o}=e,i=await indexed.openDBPromise();if("user_settings"===a&&r){const e=await indexed.getAllStorePromise(i,indexed.stores.USERSETTINGS);if(console.log("Transfer Data: userSettings",e),e.length>0){const a=e[0];a[r]=t,await indexed.putStorePromise(i,a,indexed.stores.USERSETTINGS,!0)}return!0}const s=[a];o&&Array.isArray(o)&&o.forEach((({store:e})=>{s.includes(e)||s.push(e)}));const n=i.transaction(s,"readwrite");n.onerror=()=>{throw new Error("Transaction failed")};try{return await indexed.clearStorePromise(i,a,n),Array.isArray(t)?await Promise.all(t.map((e=>indexed.addStorePromise(i,e,a,!1,n)))):await indexed.addStorePromise(i,t,a,!1,n),o&&Array.isArray(o)&&await Promise.all(o.map((({store:e,keyPath:t,id:r})=>indexed.putStorePromise(i,{[t]:r},e,!0,n)))),await new Promise(((e,t)=>{n.oncomplete=e,n.onerror=t})),!0}catch(e){throw n.abort(),e}}catch(e){const{default:t}=await import("../../../../../utils/error-messages/errorLogs.js");return await t("handleUpdatingIDBOperationsError","Error updating IDB operations: ",e),!1}};export default async function handleTransferDataButton(e){const t=document.getElementById(e);t&&t.addEventListener("click",(async()=>{try{const e=[{table:"clients",localStore:indexed.stores.CLIENTLIST,indicatorImgID:"clients-indicator"},{table:"trimmings",localStore:indexed.stores.TRIMMING,indicatorImgID:"trimmings-indicator"},{table:"personal_notes",localStore:indexed.stores.PERSONALNOTES,indicatorImgID:"personal-notes-indicator"},{table:"date_time",localStore:indexed.stores.DATETIME,indicatorImgID:"date-time-indicator"},{table:"farrier_prices",localStore:indexed.stores.FARRIERPRICES,indicatorImgID:"farrier-prices-indicator"},{table:"mileage_charges",localStore:indexed.stores.MILEAGECHARGES,indicatorImgID:"mileage-charges-indicator"},{table:"schedule_options",localStore:indexed.stores.SCHEDULINGOPTIONS,indicatorImgID:"schedule-options-indicator"},{table:"color_options",localStore:indexed.stores.COLOROPTIONS,indicatorImgID:"color-options-indicator"}],t=[],r=e.map((async e=>{const{table:r,localStore:a,indicatorImgID:o}=e,i=document.getElementById(o);i.src="/public/siteImages/indicator_yellow_light.webp";const s=await fetchData({api:transferDataAPI,data:{table:r},token:getValidationToken()});"error"===s.status||"server-error"===s.status?(i.src="/public/siteImages/indicator_red_light.png",t.push([s])):"no-data"===s.status?(i.src="/public/siteImages/indicator_green_light.webp",t.push([s])):"success"===s.status&&s.data&&(await handleUpdatingIDBOperations(s)?i.src="/public/siteImages/indicator_green_light.webp":(i.src="/public/siteImages/indicator_red_light.png",t.push([{status:"error",msg:"Error updating your device."}])))}));await Promise.all(r),t.length>0&&await handleDisplayMsg(t,"form-msg")}catch(e){const{handleError:t}=await import("../../../../../utils/error-messages/handleError.js");await t("transferDataError","Error transferring data:",e,"An error occurred while trying to transfer the data.","form-msg"),top()}}))}