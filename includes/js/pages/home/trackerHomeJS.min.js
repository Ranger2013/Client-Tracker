// @ts-nocheck
import IndexedDBOperations from"../../classes/IndexedDBOperations.js";import setupBackupNotice from"../../utils/backup-notice/backupNotice.js";import updateUserSettings from"./helpers/updateUserSettings.js";import handleNotifications from"./helpers/handleNotifications.js";import handleInstallAppModal from"./helpers/handleInstallAppModal.js";import{installPromptState}from"../../classes/InstallPromptManager.js";setupBackupNotice();const THREE_DAYS=2592e5,indexed=new IndexedDBOperations;async function showModalOnLoad(){try{const t=await indexed.openDBPromise(),e=(await indexed.getAllStorePromise(t,indexed.stores.USERSETTINGS))[0],a=window.matchMedia("(display-mode: standalone)").matches;if(!a&&"installed"===e.installApp.status)return;if(a||"default"!==e.installApp.status)if(a||"no"!==e.installApp.status)a&&("no"!==e.installApp.status&&"default"!==e.installApp.status&&"never"!==e.installApp.status||await updateUserSettings("installed","installApp",e));else{const t=e.installApp.timestamp;t+2592e5<=(new Date).getTime()&&"never"!==e.installApp.status&&await handleInstallAppModal(e)}else await handleInstallAppModal(e)}catch(t){const{default:e}=await import("../../utils/error-messages/errorLogs.js");await e("updateUserSettingsInstallAppError.txt","App install show modal error.",t)}}window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),installPromptState.setPrompt(t)})),showModalOnLoad();