// @ts-nocheck
import ManageClient from"../../../classes/ManageClient.js";import{myError,mySuccess}from"../../../utils/dom/domUtils.js";import{addListener}from"../../../utils/event-listeners/listeners.js";import buildDuplicateClientList from"../../../utils/page-builders/pages/clients/delete-duplicate/helpers/buildDuplicateClientList.js";import{getDuplicateClients,getUserDateTimeOptions}from"../../../utils/page-builders/pages/clients/delete-duplicate/helpers/getUserAndClientInfo.js";export default async function deleteDuplicateClient(){try{const e=await getUserDateTimeOptions(),t=document.getElementById("client-list-container");addListener(t,"click",(async i=>{const l=i.target.closest('button[id^="delete-client-button-"]');if(!l)return;if(!confirm("Are you sure you want to delete this client?"))return;const s=new ManageClient,n=(await s.getClientInfo({primaryKey:l.value})).client_name,r={delete_duplicate_client:!0,primaryKey:l.value,client_name:n},a=(l.value,await s.deleteDuplicateClient(r));if(a){const i=await getDuplicateClients();mySuccess("form-msg",a.msg);const l=await buildDuplicateClientList(i,e);t.innerHTML="",t.appendChild(l)}else myError("form-msg",a.msg)}))}catch(e){const{handleError:t}=await import("../../../utils/error-messages/handleError.js");await t("deleteDuplicateClientError","Delete duplicate client error: ",e)}}