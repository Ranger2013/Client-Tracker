// @ts-nocheck
import{clearMsg,myError,mySuccess}from"../../../utils/dom/domUtils.js";import{addListener}from"../../../utils/event-listeners/listeners.js";import handleDuplicateClientFormSubmission from"./helpers/handleDuplicateClientFormSubmission.js";export default async function duplicateClient({clientContainer:e}){try{const t=document.getElementById("filter-client"),r=document.getElementById("duplicate-client"),i=Array.from(r.options).map((e=>({value:e.value,text:e.text})));addListener(t,"input",(e=>filterSelectElement(e,r,i))),addListener(r,"change",(async t=>{const{default:r}=await import("./helpers/buildDuplicateClientElements.js");await r(t,e)})),addListener("duplicate-form","submit",(async t=>{if(t.preventDefault(),"null"===document.getElementById("trim-cycle").value)return myError("trim-cycle-error","Please select a trim cycle.","trim-cycle"),void addListener("trim-cycle","focus",(()=>clearMsg({container:"trim-cycle-error",hide:!0,input:"trim-cycle"})));const r=await handleDuplicateClientFormSubmission(t);"success"===r.status?(mySuccess("form-msg",r.msg),t.target.reset(),e.innerHTML=""):"error"===r.status||"validation-error"===r.status?myError("form-msg",r.msg):myError("form-msg","Unknown error. Unable to process form submission.")}))}catch(e){const{handleError:t}=await import("../../../utils/error-messages/handleError.js");throw await t("duplicateClientError","Error duplicating client: ",e),e}}function filterSelectElement(e,t,r){const i=e.target.value.toLowerCase(),[n,...s]=r;t.innerHTML="";const l=[n,...s.filter((e=>e.text.toLowerCase().includes(i)))].map((e=>Object.assign(document.createElement("option"),{value:e.value,textContent:e.text})));t.append(...l)}