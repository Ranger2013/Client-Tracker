// @ts-nocheck
import ManageFuelCharges from"../../../classes/ManageFuelCharges.js";import displayFormValidationErrors from"../../../utils/dom/displayFormValidationErrors.js";import{clearMsg,myError,mySuccess,top}from"../../../utils/dom/domUtils.js";import{isNumeric,validateRange}from"../../../utils/validation/validationUtils.js";export default async function handleByRangeFormSubmission(e){e.preventDefault();const r=document.getElementById("form-msg");try{clearMsg({container:r});const a=Object.fromEntries(new FormData(e.target));if(!validateForm(a))return;(new ManageFuelCharges).addFuelChargesByRange(a)&&(mySuccess(r,"Fuel Charges have been added"),top())}catch(e){const{default:a}=await import("../../../utils/error-messages/errorLogs.js");await a("handleByRangeFormSubmissionError","Handle by range form submission error: ",e);const{helpDeskTicket:s}=await import("../../../utils/error-messages/errorMessages.js");myError(r,`Unable to add mileage charges at this time.<br>${s}`)}}function validateForm(e){let r=[];for(const a in e)if(a.includes("ranges")||a.includes("cost")){isNumeric(e[a])||r.push({input:a,msg:"Input must be numeric."})}else if(a.includes("mileage")){validateRange(e[a])||r.push({input:a,msg:"Improper range format."})}return!(r.length>0)||(displayFormValidationErrors(r),!1)}