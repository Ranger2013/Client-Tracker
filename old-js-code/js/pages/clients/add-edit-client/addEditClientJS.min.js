// @ts-nocheck
import checkAppointment from"../../../utils/appointment-block/checkAppointment.js";import{clearMsg,disableEnableSubmitButton,myError,mySuccess,top}from"../../../utils/dom/domUtils.js";import getAllFormIdElements from"../../../utils/dom/getAllFormIDElements.js";import errorLogs from"../../../utils/error-messages/errorLogs.js";import{helpDeskTicket}from"../../../utils/error-messages/errorMessages.js";import{addListener}from"../../../utils/event-listeners/listeners.js";import checkClientFormValidity from"../../../utils/validation/checkClientFormValidity.js";const fm=document.getElementById("form-msg");export default async function addEditClient(t,e,r=null){try{const i=await getAllFormIdElements("client-form");checkAppointment({trimDate:i["trim-date"],trimCycle:i["trim-cycle"],appBlock:i["appointment-block"],projAppBlock:i["projected-appointment-block"],clientInfo:r}),["client-name","street","city","state","zip","distance","phone","email","trim-cycle"].forEach((r=>{addListener(r,"input",(async i=>{handleFormValidation(i,r,t,e)}))})),addListener("client-form","submit",(async o=>handleFormSubmission(o,i,t,e,r))),addListener("trim-date","change",(async t=>{checkAppointment({trimDate:i["trim-date"],trimCycle:i["trim-cycle"],appBlock:i["appointment-block"],projAppBlock:i["projected-appointment-block"],clientInfo:r})}))}catch(t){return top(),await errorLogs("addEditClientError","Add edit client error: ",t),void myError(fm,`Unable to validate the form at this time.<br>${helpDeskTicket}`)}}async function handleFormValidation(t,e,r,i){try{const o=await checkClientFormValidity({evt:t,cID:r,primaryKey:i});o?(myError(`${e}-error`,o,e),addListener(e,"focus",(()=>clearMsg({container:`${e}-error`,hide:!0,input:e})))):clearMsg({container:`${e}-error`,hide:!0,input:e}),await disableEnableSubmitButton("submit-button")}catch(t){throw t}}async function handleFormSubmission(t,e,r,i,o){t.preventDefault();try{if("null"===e["trim-cycle"].value)return myError("trim-cycle-error","Please select a trim cycle.","trim-cycle"),void addListener("trim-cycle","focus",(()=>clearMsg({container:"trim-cycle-error",hide:!0,input:"trim-cycle"})));const{default:c}=await import("./addEditFormSubmission.js"),n=await c({evt:t,cID:r,primaryKey:i});if(!0===n.status){if(top(),"add-client"===n.type)return mySuccess(fm,n.msg),t.target.reset(),void checkAppointment({trimDate:e["trim-date"],trimCycle:e["trim-cycle"],appBlock:e["appointment-block"],projAppBlock:e["projected-appointment-block"],clientInfo:o});if("edit-client"===n.type)return mySuccess(fm,n.msg),void checkAppointment({trimDate:e["trim-date"],trimCycle:e["trim-cycle"],appBlock:e["appointment-block"],projAppBlock:e["projected-appointment-block"],clientInfo:o});if("delete-client"===n.type)return mySuccess(fm,n.msg),void t.target.remove()}return top(),void myError(fm,n.msg)}catch(t){return top(),myError(fm,`There was an issue submitting the form.<br>${helpDeskTicket}`),void await errorLogs("addEditClientError","Add edit client error: ",t)}}