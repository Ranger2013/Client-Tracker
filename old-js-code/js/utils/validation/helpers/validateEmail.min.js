// @ts-nocheck
import IndexedDBOperations from"../../../classes/IndexedDBOperations.js";import{clearMsg}from"../../dom/domUtils.js";import errorLogs from"../../error-messages/errorLogs.js";export default async function validateEmail({evt:r}){try{if(!r.target.value)return void clearMsg({container:`${r.target.id}-error`,hide:!0,input:r.target});const e=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;return r.target.value.match(e)?r.target.value&&await checkForDuplicateEmail(r.target.value)?"Email is already in use.":void clearMsg({container:`${r.target.id}-error`,hide:!0,input:r.target}):"Please provide a valid email."}catch(r){throw await errorLogs("validateEmailError","Validate email error: ",r),r}}async function checkForDuplicateEmail(r){try{const e=new IndexedDBOperations,a=await e.openDBPromise(),t=await e.getAllStorePromise(a,e.stores.CLIENTLIST),i=t?.some((e=>e.email===r));return i}catch(r){throw await errorLogs("checkForDuplicateEmailError","Check for duplicate email error: ",r),r}}