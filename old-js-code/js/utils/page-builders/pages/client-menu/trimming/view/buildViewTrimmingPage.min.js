// @ts-nocheck
import ManageClient from"../../../../../../classes/ManageClient.js";import ManageUser from"../../../../../../classes/ManageUser.js";import{buildEle,clearMsg}from"../../../../../dom/domUtils.js";import{addListener,removeAllListeners}from"../../../../../event-listeners/listeners.js";import selectClientMenuPage from"../../../../../navigation/selectClientMenuPage.js";import buildPageContainer from"../../../../helpers/buildPageContainer.js";import buildTrimmingHeader from"./helpers/buildTrimmingHeader.js";import buildTrimmingList from"./helpers/buildTrimmingList.js";export default async function buildViewTrimmingPage({cID:e,primaryKey:i,mainContainer:r}){try{if(clearMsg({container:"page-msg"}),!e||!i)throw new Error("No cID or primary key provided.");const{clientName:t,trimInfo:a}=await getClientInfo({cID:e,primaryKey:i}),n=await getUserSettings(),[[m,s],l,o]=await Promise.all([buildPageContainer({pageTitle:"View Past Trimmings for ",clientName:t,cID:e,primaryKey:i}),buildTrimmingHeader(),buildTrimmingList(a,n)]),g=buildEle({type:"div",myClass:["w3-center"],attributes:{id:"form-msg"}}),d=buildEle({type:"div",myClass:["w3-padding-small","w3-center"]}),p=buildEle({type:"a",attributes:{href:`/tracker/trimming/view/?cID=${e}&primaryKey=${i}&view_all=true`},text:"View All Trimming History"});return addListener(p,"click",(r=>selectClientMenuPage(r,"view-all-trim-dates",e,i))),r.innerHTML="",m.appendChild(s),s.appendChild(g),s.appendChild(l),l.appendChild(o),l.appendChild(d),d.appendChild(p),r.appendChild(m),removeAllListeners}catch(e){const{handleError:i}=await import("../../../../../error-messages/handleError.js");await i("buildViewTrimmingPageError","Error building the view trimming page:",e,"Unable to display the view trimming page. Please try again later.","page-msg")}}async function getClientInfo({cID:e,primaryKey:i}){try{const r=new ManageClient,t=await r.getClientTrimmingInfo(e),a=await r.getClientInfo({primaryKey:i});return{clientName:a?.client_name||"Unable to get client name.",trimInfo:t.slice(-3)}}catch(e){const{handleError:i}=await import("../../../../../error-messages/handleError.js");return await i("getClientTrimInfoError","Get client trimming info error: ",e),{trimming_status:"error",trimming_msg:"Unable to get client trimming information."}}}async function getUserSettings(){try{const e=new ManageUser,i=await e.getDateTimeOptions();return{dateFormat:i.date_format,timeFormat:i.time_format}}catch(e){const{handleError:i}=await import("../../../../../error-messages/handleError.js");await i("getUserSettingsError","Get user settings error: ",e)}}