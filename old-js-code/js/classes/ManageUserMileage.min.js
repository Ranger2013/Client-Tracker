// @ts-nocheck
import IndexedDBOperations from"./IndexedDBOperations.js";export default class ManageUserMileage{constructor(){this.indexed=new IndexedDBOperations}async addUserMileage(e){try{const t=await this.indexed.openDBPromise();return await this.indexed.putStorePromise(t,e,this.indexed.stores.ADDMILEAGE),{status:"success",msg:`Mileage to ${e.destination} added successfully.`}}catch(e){const{handleError:t}=await import("../utils/error-messages/handleError.js");await t("addUserMileageError","Add user mileage error: ",e)}}setMileageStructure(e){const t=(new Date).toISOString().split("T")[0],s=e.ending_miles-e.starting_miles;return{add_mileage:!0,date:t,destination:e.destination,difference:s,end_mileage:e.ending_miles,start_mileage:e.starting_miles}}}