// @ts-nocheck
import IndexedDBOperations from"./IndexedDBOperations.js";export default class ManagePersonalNotes{constructor(){this.indexed=new IndexedDBOperations}async getPersonalNotes(){try{const e=await this.indexed.openDBPromise(),t=await this.indexed.getAllStorePromise(e,this.indexed.stores.PERSONALNOTES);return t?.length>0?t:[]}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");throw await t("getPersonalNotesError","Get personal notes error: ",e),e}}async addPersonalNotes(e){try{const t=await this.indexed.getLastKeyForID(this.indexed.stores.MAXPERSONALNOTESID);e.notesID=t;const s={...e,add_personalNotes:!0},r=await this.indexed.openDBPromise(),o=r.transaction([this.indexed.stores.PERSONALNOTES,this.indexed.stores.ADDPERSONALNOTES,this.indexed.stores.MAXPERSONALNOTESID],"readwrite"),a=[];return a.push(this.indexed.putStorePromise(r,e,this.indexed.stores.PERSONALNOTES,!1,o)),a.push(this.indexed.putStorePromise(r,s,this.indexed.stores.ADDPERSONALNOTES,!1,o)),a.push(this.indexed.putStorePromise(r,t,this.indexed.stores.MAXPERSONALNOTESID,!0,o)),await Promise.all(a),{status:!0,msg:"Personal notes added successfully."}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("addPersonalNotesError","Add personal notes error: ",e),{status:!1,msg:"Unable to add personal notes at this time. Please try again later."}}}async handleEditingPersonalnotes(e){try{console.log("handleEditingPersonalnotes");const t=Object.fromEntries(new FormData(e.target));if("delete"===e.submitter.name){if(!confirm("Are you sure you want to delete this note?"))return;return await this.deletePersonalNotes(t.notesID)}return await this.editPersonalNotes(t)}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("handleEditingPersonalnotesError","Handle editing personal notes error: ",e),{status:!1,msg:"Unable to edit/delete personal notes at this time. Please try again later"}}}async editPersonalNotes(e){try{const t=await this.indexed.openDBPromise(),s=t.transaction([this.indexed.stores.PERSONALNOTES,this.indexed.stores.EDITPERSONALNOTES],"readwrite"),r={...e,edit_personalNotes:!0},o={...e,notesID:parseInt(e.notesID,10)};return await Promise.all([this.indexed.putStorePromise(t,o,this.indexed.stores.PERSONALNOTES,!1,s),this.indexed.putStorePromise(t,r,this.indexed.stores.EDITPERSONALNOTES,!1,s)]),{status:!0,msg:"Personal notes edited successfully.",type:"edit"}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("editPersonalNotesError","Edit personal notes error: ",e),{status:!1,msg:"Unable to edit personal notes at this time. Please try again later."}}}async deletePersonalNotes(e){try{const t=await this.indexed.openDBPromise(),s=t.transaction([this.indexed.stores.PERSONALNOTES,this.indexed.stores.DELETEPERSONALNOTES],"readwrite"),r={notesID:parseInt(e,10),delete_personalNotes:!0};return e=parseInt(e,10),await Promise.all([this.indexed.putStorePromise(t,r,this.indexed.stores.DELETEPERSONALNOTES,!1,s),this.indexed.deleteRecordPromise(e,this.indexed.stores.PERSONALNOTES,s)]),{status:!0,msg:"Personal notes deleted successfully.",type:"delete"}}catch(e){const{default:t}=await import("../utils/error-messages/errorLogs.js");return await t("deletePersonalNotesError","Delete personal notes error: ",e),{status:!1,msg:"Unable to delete personal notes at this time. Please try again later."}}}}