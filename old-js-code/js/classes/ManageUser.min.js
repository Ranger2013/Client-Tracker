// @ts-nocheck
import errorLogs from"../utils/error-messages/errorLogs.js";import IndexedDBOperations from"./IndexedDBOperations.js";export default class ManageUser{constructor(){this.indexed=new IndexedDBOperations}async getUserSettings(){try{const e=await this.indexed.openDBPromise(),t=await this.indexed.getAllStorePromise(e,this.indexed.stores.USERSETTINGS);return t&&1===t.length?t[0]:null}catch(e){return await errorLogs("getUserSettingsError","Get user settings error: ",e),null}}async getDateTimeOptions(){try{const e=await this.getUserSettings();if(e){const t=e.date_time;return t&&Object.keys(t).length>0?t:null}}catch(e){return await errorLogs("getDateTimeOptionsError","Get date time options error: ",e),null}}async getMileageCharges(){try{const{mileage_charges:e={}}=await this.getUserSettings()||{},{per_mile:t={},range:r=[]}=e;return null!=t.cost_per_mile&&null!=t.starting_mile||0!==r.length?null!=t.cost_per_mile&&null!=t.starting_mile?t:r.length>0?r:null:null}catch(e){const{handleError:t}=await import("../utils/error-messages/errorLogs.js");return await t("getMileageChargesError","Get mileage charges error: ",e),null}}async getFarrierPrices(){try{const e=await this.getUserSettings();return e&&e.farrier_prices&&Object.keys(e.farrier_prices).length>0?e.farrier_prices:null}catch(e){return await errorLogs("getFarrierPricesError","Get farrier prices error: ",e),null}}async getScheduleOptions(){try{const e=await this.getUserSettings();return e&&e.scheduling_options&&Object.keys(e.scheduling_options).length>0?e.scheduling_options:null}catch(e){return await errorLogs("getScheduleOptionsError","Get schedule options error: ",e),null}}async getColorOptions(){try{const e=await this.getUserSettings();return e&&e.color_options&&Object.keys(e.color_options).length>0?e.color_options:null}catch(e){return errorLogs("getColorOptionsError","Get color options error: ",e),null}}async getUserBlockedDates(){try{const e=await this.getUserSettings();if(e)return e.blocked_dates&&Object.keys(e.blocked_dates).length>0?e.blocked_dates:null}catch(e){return await errorLogs("getUserBlockedDatesError","Get user blocked dates error: ",e),null}}async updateLocalUserSettings({userData:e,settingsProperty:t,backupStore:r=null,backupAPITag:s=null,backupData:a=null}){try{const n=await this.getUserSettings();if(!n)return!1;const i=await this.updateUsersSettings(n,e,t);return await this.manageIDBTransactions({userData:e,userSettings:i,backupStore:r,backupAPITag:s,backupData:a}),!0}catch(e){return await errorLogs("updateLocalUserSettingsError","Update local user settings error: ",e),!1}}async updateUsersSettings(e,t,r){return e[r]=t,e}async manageIDBTransactions({userData:e,userSettings:t,backupStore:r=null,backupAPITag:s=null,backupData:a=null}){try{const n=await this.indexed.openDBPromise(),i=await this.indexed.clearStorePromise(n,this.indexed.stores.USERSETTINGS),o=await this.indexed.putStorePromise(n,t,this.indexed.stores.USERSETTINGS);return r&&s&&await this.backupDataIfNeeded(e,r,s,a),await Promise.all([i,o]),!0}catch(e){throw await errorLogs("manageIDBTransactionsError","Manage IDB transactions error: ",e),e}}async backupDataIfNeeded(e,t,r,s){try{const a=await this.indexed.openDBPromise(),n=s||{...e,[r]:!0};await this.indexed.putStorePromise(a,n,t,!0)}catch(e){throw await errorLogs("backupDataIfNeededError","Backup data if needed error: ",e),e}}}